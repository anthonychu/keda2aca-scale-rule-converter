[
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/activemq",
    "title": "ActiveMQ (1)",
    "example": "triggers:\n- type: activemq\n  metadata:\n    managementEndpoint: \"activemq.activemq-test:8161\"\n    destinationName: \"testQueue\"\n    brokerName: \"activemq_broker\"\n    targetQueueSize: \"100\"\n    activationTargetQueueSize: \"10\"\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/activemq",
    "title": "ActiveMQ (2)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: activemq-secret\ntype: Opaque\ndata:\n  activemq-password: ACTIVEMQ_PASSWORD\n  activemq-username: ACTIVEMQ_USERNAME\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: trigger-auth-activemq\nspec:\n  secretTargetRef:\n  - parameter: username\n    name: activemq-secret\n    key: activemq-username\n  - parameter: password\n    name: activemq-secret\n    key: activemq-password\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: activemq-scaledobject\nspec:\n  scaleTargetRef:\n    name: nginx-deployment\n  triggers:\n  - type: activemq\n    metadata:\n      managementEndpoint: \"activemq.activemq-test:8161\"\n      destinationName: \"testQ\"\n      brokerName: \"localhost\"\n      targetQueueSize: \"50\"\n    authenticationRef:\n      name: trigger-auth-activemq\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/apache-kafka",
    "title": "Apache Kafka (1)",
    "example": "triggers:\n- type: kafka\n  metadata:\n    bootstrapServers: kafka.svc:9092\n    consumerGroup: my-group\n    topic: test-topic\n    lagThreshold: '5'\n    activationLagThreshold: '3'\n    offsetResetPolicy: latest\n    allowIdleConsumers: false\n    scaleToZeroOnInvalidOffset: false\n    version: 1.0.0\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/apache-kafka",
    "title": "Apache Kafka (2)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: kafka-scaledobject\n  namespace: default\nspec:\n  scaleTargetRef:\n    name: azure-functions-deployment\n  pollingInterval: 30\n  triggers:\n  - type: kafka\n    metadata:\n      bootstrapServers: localhost:9092\n      consumerGroup: my-group       # Make sure that this consumer group name is the same one as the one that is consuming topics\n      topic: test-topic\n      # Optional\n      lagThreshold: \"50\"\n      offsetResetPolicy: latest\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/apache-kafka",
    "title": "Apache Kafka (3)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: keda-kafka-secrets\n  namespace: default\ndata:\n  sasl: \"plaintext\"\n  username: \"admin\"\n  password: \"admin\"\n  tls: \"enable\"\n  ca: <your ca>\n  cert: <your cert>\n  key: <your key>\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-trigger-auth-kafka-credential\n  namespace: default\nspec:\n  secretTargetRef:\n  - parameter: sasl\n    name: keda-kafka-secrets\n    key: sasl\n  - parameter: username\n    name: keda-kafka-secrets\n    key: username\n  - parameter: password\n    name: keda-kafka-secrets\n    key: password\n  - parameter: tls\n    name: keda-kafka-secrets\n    key: tls\n  - parameter: ca\n    name: keda-kafka-secrets\n    key: ca\n  - parameter: cert\n    name: keda-kafka-secrets\n    key: cert\n  - parameter: key\n    name: keda-kafka-secrets\n    key: key\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: kafka-scaledobject\n  namespace: default\nspec:\n  scaleTargetRef:\n    name: azure-functions-deployment\n  pollingInterval: 30\n  triggers:\n  - type: kafka\n    metadata:\n      bootstrapServers: localhost:9092\n      consumerGroup: my-group       # Make sure that this consumer group name is the same one as the one that is consuming topics\n      topic: test-topic\n      # Optional\n      lagThreshold: \"50\"\n      offsetResetPolicy: latest\n    authenticationRef:\n      name: keda-trigger-auth-kafka-credential\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/artemis",
    "title": "ActiveMQ Artemis (1)",
    "example": "triggers:\n- type: artemis-queue\n  metadata:\n    managementEndpoint: \"artemis-activemq.artemis:8161\"\n    queueName: \"test\"\n    brokerName: \"artemis-activemq\"\n    brokerAddress: \"test\"\n    queueLength: '10'\n    activationQueueLength: '1'\n    username: 'ARTEMIS_USERNAME'\n    password: 'ARTEMIS_PASSWORD'\n    restApiTemplate: # Optional. Default : \"http://<<managementEndpoint>>/console/jolokia/read/org.apache.activemq.artemis:broker=\\\"<<brokerName>>\\\",component=addresses,address=\\\"<<brokerAddress>>\\\",subcomponent=queues,routing-type=\\\"anycast\\\",queue=\\\"<<queueName>>\\\"/MessageCount\"\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/artemis",
    "title": "ActiveMQ Artemis (2)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: kedartemis\n  namespace: kedartemis\n  labels:\n    app: kedartemis\ntype: Opaque\ndata:\n  artemis-password: \"YXJ0ZW1pcw==\"\n  artemis-username: \"YXJ0ZW1pcw==\"\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: trigger-auth-kedartemis\n  namespace: kedartemis\nspec:\n  secretTargetRef:\n    - parameter: username\n      name: kedartemis\n      key: artemis-username\n    - parameter: password\n      name: kedartemis\n      key: artemis-password\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: kedartemis-consumer-scaled-object\n  namespace: kedartemis\nspec:\n  scaleTargetRef:\n    name: kedartemis-consumer\n  triggers:\n    - type: artemis-queue\n      metadata:\n        managementEndpoint: \"artemis-activemq.artemis:8161\"\n        queueName: \"test\"\n        queueLength: \"50\"\n        brokerName: \"artemis-activemq\"\n        brokerAddress: \"test\"\n        restApiTemplate: # Optional. Default: \"http://<<managementEndpoint>>/console/jolokia/read/org.apache.activemq.artemis:broker=\\\"<<brokerName>>\\\",component=addresses,address=\\\"<<brokerAddress>>\\\",subcomponent=queues,routing-type=\\\"anycast\\\",queue=\\\"<<queueName>>\\\"/MessageCount\"\n      authenticationRef:\n        name: trigger-auth-kedartemis\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/aws-cloudwatch",
    "title": "AWS CloudWatch (1)",
    "example": "triggers:\n- type: aws-cloudwatch\n  metadata:\n    # Required: namespace\n    namespace: AWS/SQS\n    # Optional: Dimension Name\n    dimensionName: QueueName\n    # Optional: Dimension Value\n    dimensionValue: keda\n    # Optional: Expression query\n    expression: SELECT MAX(\"ApproximateNumberOfMessagesVisible\") FROM \"AWS/SQS\" WHERE QueueName = 'keda'\n    metricName: ApproximateNumberOfMessagesVisible\n    targetMetricValue: \"2.1\"\n    minMetricValue: \"1.5\"\n    # Required: region\n    awsRegion: \"eu-west-1\"\n    # Optional: AWS Access Key ID, can use TriggerAuthentication as well\n    awsAccessKeyIDFromEnv: AWS_ACCESS_KEY_ID # default AWS_ACCESS_KEY_ID\n    # Optional: AWS Secret Access Key, can use TriggerAuthentication as well\n    awsSecretAccessKeyFromEnv: AWS_SECRET_ACCESS_KEY # default AWS_SECRET_ACCESS_KEY\n    identityOwner: pod | operator # Optional. Default: pod\n    # Optional: Collection Time\n    metricCollectionTime: \"300\" # default 300\n    # Optional: Metric Statistic\n    metricStat: \"Average\" # default \"Average\"\n    # Optional: Metric Statistic Period\n    metricStatPeriod: \"300\" # default 300\n    # Optional: Metric Unit\n    metricUnit: \"Count\" # default \"\"\n    # Optional: Metric EndTime Offset\n    metricEndTimeOffset: \"60\" # default 0\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/aws-cloudwatch",
    "title": "AWS CloudWatch (2)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: test-secrets\ndata:\n  AWS_ACCESS_KEY_ID: <encoded-user-id> # Required.\n  AWS_SECRET_ACCESS_KEY: <encoded-key> # Required.\n  AWS_SESSION_TOKEN: <encoded-session-token> # Required when using temporary credentials.\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-trigger-auth-aws-credentials\n  namespace: keda-test\nspec:\n  secretTargetRef:\n  - parameter: awsAccessKeyID     # Required.\n    name: test-secrets            # Required.\n    key: AWS_ACCESS_KEY_ID        # Required.\n  - parameter: awsSecretAccessKey # Required.\n    name: test-secrets            # Required.\n    key: AWS_SECRET_ACCESS_KEY    # Required.\n  - parameter: awsSessionToken    # Required when using temporary credentials.\n    name: test-secrets            # Required when using temporary credentials.\n    key: AWS_SESSION_TOKEN        # Required when using temporary credentials.\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: aws-cloudwatch-queue-scaledobject\n  namespace: keda-test\nspec:\n  scaleTargetRef:\n    name: nginx-deployment\n  triggers:\n  - type: aws-cloudwatch\n    metadata:\n      namespace: AWS/SQS\n      dimensionName: QueueName\n      dimensionValue: keda\n      metricName: ApproximateNumberOfMessagesVisible\n      targetMetricValue: \"2.1\"\n      minMetricValue: \"0\"\n      awsRegion: \"eu-west-1\"\n    authenticationRef:\n      name: keda-trigger-auth-aws-credentials\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/aws-dynamodb-streams",
    "title": "AWS DynamoDB Streams (1)",
    "example": "triggers:\n- type: aws-dynamodb-streams\n  metadata:\n    # Required: awsRegion\n    awsRegion: \"ap-northeast-1\"\n    # Required: tableName\n    tableName: myTableName\n    # Optional targetValue\n    shardCount: \"2\"\n    # Optional. Default: pod\n    identityOwner: pod | operator\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/aws-dynamodb-streams",
    "title": "AWS DynamoDB Streams (2)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: test-secrets\n  namespace: keda-test\ndata:\n  AWS_ROLE_ARN: <encoded-iam-role-arn>\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-trigger-auth-aws-credentials\n  namespace: keda-test\nspec:\n  secretTargetRef:\n  - parameter: awsRoleArn    # The property in KEDA.\n    name: test-secrets       # The name of the kubernetes secret.\n    key: AWS_ROLE_ARN        # The key from the kubernetes secret.\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name:  aws-dynamodb-streams-scaledobject\n  namespace: keda-test\nspec:\n  scaleTargetRef:\n    name: nginx-deployment\n  triggers:\n  - type: aws-dynamodb-streams\n    authenticationRef:\n      name: keda-trigger-auth-aws-credentials\n    metadata:\n      awsRegion: ap-northeast-1\n      tableName: keda-events\n      shardCount: \"2\"\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/aws-dynamodb-streams",
    "title": "AWS DynamoDB Streams (3)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: test-secrets\n  namespace: keda-test\ndata:\n  AWS_ACCESS_KEY_ID: <encoded-user-id>       # Required.\n  AWS_SECRET_ACCESS_KEY: <encoded-key>       # Required.\n  AWS_SESSION_TOKEN: <encoded-session-token> # Required when using temporary credentials.\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-trigger-auth-aws-credentials\n  namespace: keda-test\nspec:\n  secretTargetRef:\n  - parameter: awsAccessKeyID     # Required.\n    name: test-secrets            # Required.\n    key: AWS_ACCESS_KEY_ID        # Required.\n  - parameter: awsSecretAccessKey # Required.\n    name: test-secrets            # Required.\n    key: AWS_SECRET_ACCESS_KEY    # Required.\n  - parameter: awsSessionToken    # Required when using temporary credentials.\n    name: test-secrets            # Required when using temporary credentials.\n    key: AWS_SESSION_TOKEN        # Required when using temporary credentials.\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name:  aws-dynamodb-streams-scaledobject\n  namespace: keda-test\nspec:\n  scaleTargetRef:\n    name: nginx-deployment\n  triggers:\n  - type: aws-dynamodb-streams\n    authenticationRef:\n      name: keda-trigger-auth-aws-credentials\n    metadata:\n      awsRegion: ap-northeast-1\n      tableName: keda-events\n      shardCount: \"2\"\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/aws-dynamodb",
    "title": "AWS DynamoDB (1)",
    "example": "triggers:\n- type: aws-dynamodb\n  metadata:\n    # Required: awsRegion\n    awsRegion: \"eu-west-1\"\n    # Required: tableName\n    tableName: myTableName\n    # Required: targetValue\n    targetValue: \"1\"\n    # Required: expressionAttributeNames\n    expressionAttributeNames: '{ \"#k\" : \"partition_key_name\"}'\n    # Required: keyConditionExpression\n    keyConditionExpression: \"#k = :key\"\n    # Required: expressionAttributeValues\n    expressionAttributeValues: '{ \":key\" : {\"S\":\"partition_key_target_value\"}}'\n    # Optional. Default: pod\n    identityOwner: pod | operator\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/aws-dynamodb",
    "title": "AWS DynamoDB (2)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: test-secrets\ndata:\n  AWS_ROLE_ARN: <encoded-iam-role-arn>\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-trigger-auth-aws-credentials\n  namespace: default\nspec:\n  secretTargetRef:\n  - parameter: awsRoleArn    # The property in KEDA.\n    name: test-secrets       # The name of the kubernetes secret.\n    key: AWS_ROLE_ARN        # The key from the kubernetes secret.\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name:  aws-dynamodb-table-scaledobject\n  namespace: keda-test\nspec:\n  scaleTargetRef:\n    name: nginx-deployment\n  triggers:\n  - type: aws-dynamodb\n    authenticationRef:\n      name: keda-trigger-auth-aws-credentials\n    metadata:\n      awsRegion: eu-west-2\n      tableName: keda-events\n      expressionAttributeNames: '{ \"#k\" : \"event_type\"}'\n      keyConditionExpression: \"#k = :key\"\n      expressionAttributeValues: '{ \":key\" : {\"S\":\"scaling_event\"}}'\n      targetValue: \"5\"\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/aws-dynamodb",
    "title": "AWS DynamoDB (3)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: test-secrets\ndata:\n  AWS_ACCESS_KEY_ID: <encoded-user-id> # Required.\n  AWS_SECRET_ACCESS_KEY: <encoded-key> # Required.\n  AWS_SESSION_TOKEN: <encoded-session-token> # Required when using temporary credentials.\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-trigger-auth-aws-credentials\n  namespace: default\nspec:\n  secretTargetRef:\n  - parameter: awsAccessKeyID     # Required.\n    name: test-secrets            # Required.\n    key: AWS_ACCESS_KEY_ID        # Required.\n  - parameter: awsSecretAccessKey # Required.\n    name: test-secrets            # Required.\n    key: AWS_SECRET_ACCESS_KEY    # Required.\n  - parameter: awsSessionToken    # Required when using temporary credentials.\n    name: test-secrets            # Required when using temporary credentials.\n    key: AWS_SESSION_TOKEN        # Required when using temporary credentials.\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name:  aws-dynamodb-table-scaledobject\n  namespace: keda-test\nspec:\n  scaleTargetRef:\n    name: nginx-deployment\n  triggers:\n  - type: aws-dynamodb\n    authenticationRef:\n      name: keda-trigger-auth-aws-credentials\n    metadata:\n      awsRegion: eu-west-2\n      tableName: keda-events\n      expressionAttributeNames: '{ \"#k\" : \"event_type\"}'\n      keyConditionExpression: \"#k = :key\"\n      expressionAttributeValues: '{ \":key\" : {\"S\":\"scaling_event\"}}'\n      targetValue: \"5\"\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/aws-kinesis",
    "title": "AWS Kinesis Stream (1)",
    "example": "triggers:\n- type: aws-kinesis-stream\n  metadata:\n    # Required\n    streamName: myKinesisStream\n    # Required\n    awsRegion: \"eu-west-1\"\n    # Optional: Default: 2\n    shardCount: \"2\"\n    identityOwner: pod | operator # Optional. Default: pod\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/aws-kinesis",
    "title": "AWS Kinesis Stream (2)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: test-secrets\n  namespace: keda-test\ndata:\n  AWS_ACCESS_KEY_ID: <encoded-user-id> # Required.\n  AWS_SECRET_ACCESS_KEY: <encoded-key> # Required.\n  AWS_SESSION_TOKEN: <encoded-session-token> # Required when using temporary credentials.\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-trigger-auth-aws-credentials\n  namespace: keda-test\nspec:\n  secretTargetRef:\n  - parameter: awsAccessKeyID     # Required.\n    name: test-secrets            # Required.\n    key: AWS_ACCESS_KEY_ID        # Required.\n  - parameter: awsSecretAccessKey # Required.\n    name: test-secrets            # Required.\n    key: AWS_SECRET_ACCESS_KEY    # Required.\n  - parameter: awsSessionToken    # Required when using temporary credentials.\n    name: test-secrets            # Required when using temporary credentials.\n    key: AWS_SESSION_TOKEN        # Required when using temporary credentials.\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: aws-kinesis-stream-scaledobject\n  namespace: keda-test\nspec:\n  scaleTargetRef:\n    name: nginx-deployment\n  triggers:\n    - type: aws-kinesis-stream\n      authenticationRef:\n        name: keda-trigger-auth-aws-credentials\n      metadata:\n        # Required\n        streamName: myKinesisStream\n        # Required\n        awsRegion: \"eu-west-1\"\n        # Optional: Default: 2\n        shardCount: \"2\"\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/aws-sqs",
    "title": "AWS SQS Queue (1)",
    "example": "triggers:\n- type: aws-sqs-queue\n  metadata:\n    # Required: queueURL\n    queueURL: https://sqs.eu-west-1.amazonaws.com/account_id/QueueName\n    queueLength: \"5\"  # Default: \"5\"\n    # Required: awsRegion\n    awsRegion: \"eu-west-1\"\n    identityOwner: pod | operator # Optional. Default: pod\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/aws-sqs",
    "title": "AWS SQS Queue (2)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-trigger-auth-aws-credentials\n  namespace: keda-test\nspec:\n  podIdentity:\n    provider: aws-kiam # or aws-eks when using IRSA\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: aws-sqs-queue-scaledobject\n  namespace: keda-test\nspec:\n  scaleTargetRef:\n    name: nginx-deployment\n  triggers:\n  - type: aws-sqs-queue\n    authenticationRef:\n      name: keda-trigger-auth-aws-credentials\n    metadata:\n      queueURL: myQueue\n      queueLength: \"5\"\n      awsRegion: \"eu-west-1\"\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/aws-sqs",
    "title": "AWS SQS Queue (3)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: test-secrets\ndata:\n  AWS_ROLE_ARN: <encoded-iam-role-arn>\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-trigger-auth-aws-credentials\n  namespace: keda-test\nspec:\n  secretTargetRef:\n  - parameter: awsRoleArn    # The property in KEDA.\n    name: test-secrets       # The name of the kubernetes secret.\n    key: AWS_ROLE_ARN        # The key from the kubernetes secret.\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: aws-sqs-queue-scaledobject\n  namespace: keda-test\nspec:\n  scaleTargetRef:\n    name: nginx-deployment\n  triggers:\n  - type: aws-sqs-queue\n    authenticationRef:\n      name: keda-trigger-auth-aws-credentials\n    metadata:\n      queueURL: myQueue\n      queueLength: \"5\"\n      awsRegion: \"eu-west-1\"\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/aws-sqs",
    "title": "AWS SQS Queue (4)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: test-secrets\ndata:\n  AWS_ACCESS_KEY_ID: <encoded-user-id> # Required.\n  AWS_SECRET_ACCESS_KEY: <encoded-key> # Required.\n  AWS_SESSION_TOKEN: <encoded-session-token> # Required when using temporary credentials.\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-trigger-auth-aws-credentials\n  namespace: keda-test\nspec:\n  secretTargetRef:\n  - parameter: awsAccessKeyID     # Required.\n    name: test-secrets            # Required.\n    key: AWS_ACCESS_KEY_ID        # Required.\n  - parameter: awsSecretAccessKey # Required.\n    name: test-secrets            # Required.\n    key: AWS_SECRET_ACCESS_KEY    # Required.\n  - parameter: awsSessionToken    # Required when using temporary credentials.\n    name: test-secrets            # Required when using temporary credentials.\n    key: AWS_SESSION_TOKEN        # Required when using temporary credentials.\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: aws-sqs-queue-scaledobject\n  namespace: keda-test\nspec:\n  scaleTargetRef:\n    name: nginx-deployment\n  triggers:\n  - type: aws-sqs-queue\n    authenticationRef:\n      name: keda-trigger-auth-aws-credentials\n    metadata:\n      queueURL: myQueue\n      queueLength: \"5\"\n      awsRegion: \"eu-west-1\"\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/aws-sqs",
    "title": "AWS SQS Queue (5)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: test-secrets\ndata:\n  AWS_ACCESS_KEY_ID: <encoded-user-id> # Required.\n  AWS_SECRET_ACCESS_KEY: <encoded-key> # Required.\n  AWS_SESSION_TOKEN: <encoded-session-token> # Required when using temporary credentials.\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-trigger-auth-aws-credentials\n  namespace: keda-test\nspec:\n  secretTargetRef:\n  - parameter: awsAccessKeyID     # Required.\n    name: test-secrets            # Required.\n    key: AWS_ACCESS_KEY_ID        # Required.\n  - parameter: awsSecretAccessKey # Required.\n    name: test-secrets            # Required.\n    key: AWS_SECRET_ACCESS_KEY    # Required.\n  - parameter: awsSessionToken    # Required when using temporary credentials.\n    name: test-secrets            # Required when using temporary credentials.\n    key: AWS_SESSION_TOKEN        # Required when using temporary credentials.\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: aws-sqs-queue-scaledobject\n  namespace: keda-test\nspec:\n  scaleTargetRef:\n    name: nginx-deployment\n  triggers:\n  - type: aws-sqs-queue\n    authenticationRef:\n      name: keda-trigger-auth-aws-credentials\n    metadata:\n      queueURL: myQueue\n      queueLength: \"5\"\n      awsRegion: \"eu-west-1\"\n      scaleOnInFlight: false\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/azure-app-insights",
    "title": "Azure Application Insights (1)",
    "example": "triggers:\n- type: azure-app-insights\n  metadata:\n    metricAggregationTimespan: \"0:1\"\n    metricAggregationType: avg\n    metricFilter: cloud/roleName eq 'role_name'\n    metricId: \"customMetrics/example-metric\"\n    targetValue: \"1.5\"\n    activationTargetValue: \"5.5\"\n    activeDirectoryClientIdFromEnv: CLIENT_ID_ENV_NAME # Optional, can use TriggerAuthentication as well\n    activeDirectoryClientPasswordFromEnv: CLIENT_PASSWORD_ENV_NAME # Optional, can use TriggerAuthentication as well\n    applicationInsightsIdFromEnv: APP_ID # Optional, can use TriggerAuthentication as well\n    tenantIdFromEnv: TENANT_ID` # Optional, can use TriggerAuthentication as well\n    # Optional (Default: AzurePublicCloud)\n    cloud: Private\n    # Required when cloud = Private\n    appInsightsResourceURL: https://api.applicationinsights.airgap.io/\n    # Required when cloud = Private.\n    activeDirectoryEndpoint: https://login.airgap.example/\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/azure-app-insights",
    "title": "Azure Application Insights (2)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: azure-app-insights-secrets\ndata:\n  activeDirectoryClientId: <clientId>\n  activeDirectoryClientPassword: <clientPassword>\n  applicationInsightsId: <appInsightsAppId>\n  tenantId: <tenantId>\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: azure-app-insights-trigger-auth\nspec:\n  secretTargetRef:\n    - parameter: activeDirectoryClientId\n      name: azure-app-insights-secrets\n      key: activeDirectoryClientId\n    - parameter: activeDirectoryClientPassword\n      name: azure-app-insights-secrets\n      key: activeDirectoryClientPassword\n    - parameter: applicationInsightsId\n      name: azure-app-insights-secrets\n      key: applicationInsightsId\n    - parameter: tenantId\n      name: azure-app-insights-secrets\n      key: tenantId\n  # or Pod Identity, kind: Secret is not required in case of pod Identity\n  podIdentity:\n      provider: azure | azure-workload\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: azure-app-insights-scaler\nspec:\n  scaleTargetRef:\n    name: azure-app-insights-example\n  minReplicaCount: 1\n  maxReplicaCount: 10\n  triggers:\n  - type: azure-app-insights\n    metadata:\n      metricId: \"customMetrics/example-metric\"\n      metricAggregationTimespan: \"0:5\"\n      metricAggregationType: avg\n      metricFilter: cloud/roleName eq 'example'\n      targetValue: \"1\"\n    authenticationRef:\n      name: azure-app-insights-trigger-auth\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/azure-app-insights",
    "title": "Azure Application Insights (3)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: azure-app-insights-secrets\ntype: Opaque\ndata:\n  activeDirectoryClientId: <clientId>\n  activeDirectoryClientPassword: <clientPassword>\n  applicationInsightsId: <appInsightsAppId>\n  tenantId: <tenantId>\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: azure-app-insights-example\nspec:\n  replicas: 0\n  selector:\n    matchLabels:\n      app: azure-app-insights-example\n  template:\n    metadata:\n      labels:\n        app: azure-app-insights-example\n    spec:\n      containers:\n      - name: example\n        image: nginx:1.16.1\n        env:\n        - name: ACTIVE_DIRECTORY_ID\n          valueFrom:\n            secretKeyRef:\n              name: azure-app-insights-secrets\n              key: activeDirectoryClientId\n        - name: ACTIVE_DIRECTORY_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: azure-app-insights-secrets\n              key: activeDirectoryClientPassword\n        - name: APP_INSIGHTS_APP_ID\n          valueFrom:\n            secretKeyRef:\n              name: azure-app-insights-secrets\n              key: applicationInsightsId\n        - name: TENANT_ID\n          valueFrom:\n            secretKeyRef:\n              name: azure-app-insights-secrets\n              key: tenantId\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: azure-app-insights-scaler\nspec:\n  scaleTargetRef:\n    name: azure-app-insights-example\n  pollingInterval: 5\n  cooldownPeriod: 5\n  minReplicaCount: 0\n  maxReplicaCount: 2\n  triggers:\n    - type: azure-app-insights\n      metadata:\n        metricId: \"customMetrics/example-metric\"\n        metricAggregationTimespan: \"0:5\"\n        metricAggregationType: avg\n        metricFilter: cloud/roleName eq 'example'\n        targetValue: \"1\"\n        activeDirectoryClientIdFromEnv: ACTIVE_DIRECTORY_ID\n        activeDirectoryClientPasswordFromEnv: ACTIVE_DIRECTORY_PASSWORD\n        applicationInsightsIdFromEnv: APP_INSIGHTS_APP_ID\n        tenantIdFromEnv: TENANT_ID\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/azure-data-explorer",
    "title": "Azure Data Explorer (1)",
    "example": "triggers:\n- type: azure-data-explorer\n  metadata:\n    endpoint: https://keda.eastus.kusto.windows.net\n    databaseName: kedadb\n    query: |\n      StormEvents\n      | summarize StormCount = count() by State\n      | top 1 by StormCount desc\n    threshold: \"10.5\"\n    activationThreshold: \"10.5\"\n    tenantId: 045ef409-6dee-4893-a824-5612eac467b1 # Can use TriggerAuthentication as well\n    clientId: 4ba039f1-d69c-434e-9268-4a2bb7bba90d # Can use TriggerAuthentication as well\n    clientSecret: t0p-s3cret  # Can use TriggerAuthentication as well\n    # Alternatively, you can use existing environment variables to read aad app creds from:\n    clientIdFromEnv: AAD_APP_CLIENT_ID_ENV_VAR_NAME # Optional. You can use this instead of `clientId` parameter.\n    clientSecretFromEnv: AAD_APP_SECRET_ENV_VAR_NAME # Optional. You can use this instead of `clientSecret` parameter.\n    tenantIdFromEnv: AAD_APP_TENANT_ID_ENV_VAR_NAME # Optional. You can use this instead of `tenantId` parameter.\n    # Optional (Default: AzurePublicCloud)\n    cloud: Private\n    # Required when cloud = Private.\n    activeDirectoryEndpoint: https://login.airgap.example/\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/azure-data-explorer",
    "title": "Azure Data Explorer (2)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: azure-data-explorer-secret\ndata:\n  clientId: <clientId> # Base64 encoded\n  clientSecret: <clientSecret> # Base64 encoded\n  tenantId: <tenantId> # Base64 encoded\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: azure-data-explorer-trigger-auth\nspec:\n  secretTargetRef:\n    - parameter: clientId\n      name: azure-data-explorer-secret # Required. Refers to the name of the secret\n      key: clientId\n    - parameter: clientSecret\n      name: azure-data-explorer-secret\n      key: clientSecret\n    - parameter: tenantId\n      name: azure-data-explorer-secret\n      key: tenantId\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: azure-data-explorer-scaler\nspec:\n  scaleTargetRef:\n  kind: StatefulSet # Optional: Default: Deployment, Available Options: ReplicaSet Deployment, DaemonSet, StatefulSet\n    name: azure-data-explorer-example\n  pollingInterval: 30\n  cooldownPeriod: 45\n  minReplicaCount: 0\n  maxReplicaCount: 10\n  triggers:\n  - type: azure-data-explorer\n    metadata:\n      databaseName: Weather\n      endpoint: https://keda.eastus.kusto.windows.net\n      query: |\n        StormEvents\n        | summarize StormCount = count() by State\n        | top 1 by StormCount desc\n    threshold: \"1000\"\n    authenticationRef:\n      name: azure-data-explorer-trigger-auth\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/azure-data-explorer",
    "title": "Azure Data Explorer (3)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: azure-data-explorer-trigger-auth\nspec:\n  podIdentity:\n      provider: azure | azure-workload\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: azure-data-explorer-scaler\nspec:\n  scaleTargetRef:\n  kind: StatefulSet # Optional: Default: Deployment, Available Options: ReplicaSet Deployment, DaemonSet, StatefulSet\n    name: azure-data-explorer-example\n  pollingInterval: 30\n  cooldownPeriod: 45\n  minReplicaCount: 0\n  maxReplicaCount: 10\n  triggers:\n  - type: azure-data-explorer\n    metadata:\n      databaseName: Weather\n      endpoint: https://keda.eastus.kusto.windows.net\n      query: |\n        StormEvents\n        | summarize StormCount = count() by State\n        | top 1 by StormCount desc\n    threshold: \"1000\"\n    authenticationRef:\n      name: azure-data-explorer-trigger-auth\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/azure-data-explorer",
    "title": "Azure Data Explorer (4)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: azure-data-explorer-secrets\ntype: Opaque\ndata:\n  clientId: <clientId> # Base64 encoded\n  clientSecret: <clientSecret> # Base64 encoded\n  tenantId: <tenantId> # Base64 encoded\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: azure-data-explorer-example\nspec:\n  replicas: 0\n  selector:\n    matchLabels:\n      app: azure-data-explorer-example\n  template:\n    metadata:\n      labels:\n        app: azure-data-explorer-example\n    spec:\n      containers:\n      - name: example\n        image: nginx:1.16.1\n        env:\n        - name: AAD_APP_CLIENT_ID\n          valueFrom:\n            secretKeyRef:\n              name: azure-data-explorer-secret\n              key: clientId\n        - name: AAD_APP_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: azure-data-explorer-secret\n              key: clientSecret\n        - name: AAD_APP_TENANT_ID\n          valueFrom:\n            secretKeyRef:\n              name: azure-data-explorer-secret\n              key: tenantId\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: azure-data-explorer-scaler\nspec:\n  scaleTargetRef:\n    name: azure-data-explorer-example\n  pollingInterval: 30\n  cooldownPeriod: 45\n  minReplicaCount: 0\n  maxReplicaCount: 10\n  triggers:\n    - type: azure-data-explorer\n      metadata:\n        clientIdFromEnv: AAD_APP_CLIENT_ID\n        clientSecretFromEnv: AAD_APP_SECRET\n        tenantIdFromEnv: AAD_APP_TENANT_ID\n        databaseName: Weather\n        endpoint: https://keda.eastus.kusto.windows.net\n        query: |\n          StormEvents\n          | summarize StormCount = count() by State\n          | top 1 by StormCount desc\n        threshold: \"1000\"\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/azure-event-hub",
    "title": "Azure Event Hubs (1)",
    "example": "triggers:\n- type: azure-eventhub\n  metadata:\n    connectionFromEnv: EVENTHUB_CONNECTIONSTRING_ENV_NAME\n    storageConnectionFromEnv: STORAGE_CONNECTIONSTRING_ENV_NAME\n    consumerGroup: $Default\n    unprocessedEventThreshold: '64'\n    activationUnprocessedEventThreshold: '10'\n    blobContainer: 'name_of_container'\n    # Optional (Default: AzurePublicCloud)\n    cloud: Private\n    # Required when cloud = Private\n    endpointSuffix: servicebus.airgap.example\n    # Required when cloud = Private.\n    activeDirectoryEndpoint: https://login.airgap.example/\n    # Required when cloud = Private.\n    eventHubResourceURL: https://eventhubs.airgap.example/\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/azure-event-hub",
    "title": "Azure Event Hubs (2)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: nameOfTriggerAuth\n  namespace: default\nspec:\n  podIdentity:\n    provider: Azure | azure-workload\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/azure-event-hub",
    "title": "Azure Event Hubs (3)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: azure-eventhub-scaledobject\n  namespace: default\nspec:\n  scaleTargetRef:\n    name: azureeventhub-function\n  triggers:\n  - type: azure-eventhub\n    metadata:\n      # Required\n      storageConnectionFromEnv: AzureWebJobsStorage\n      # Required if not using Pod Identity\n      connectionFromEnv: EventHub\n      # Required if using Pod Identity\n      eventHubNamespace: AzureEventHubNameSpace\n      eventHubName: NameOfTheEventHub\n# Optional\n      consumerGroup: $Default # default: $Default\n      unprocessedEventThreshold: '64' # default 64 events.\n      blobContainer: ehcontainer\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/azure-log-analytics",
    "title": "Azure Log Analytics (1)",
    "example": "triggers:\n  - type: azure-log-analytics\n    metadata:\n      tenantId: \"AZURE_AD_TENANT_ID\"\n      clientId: \"SERVICE_PRINCIPAL_CLIENT_ID\"\n      clientSecret: \"SERVICE_PRINCIPAL_PASSWORD\"\n      workspaceId: \"LOG_ANALYTICS_WORKSPACE_ID\"\n      query: |\n        let AppName = \"web\";\n        let ClusterName = \"demo-cluster\";\n        let AvgDuration = ago(10m);\n        let ThresholdCoefficient = 0.8;\n        Perf\n        | where InstanceName contains AppName\n        | where InstanceName contains ClusterName\n        | where CounterName == \"cpuUsageNanoCores\"\n        | where TimeGenerated > AvgDuration\n        | extend AppName = substring(InstanceName, indexof((InstanceName), \"/\", 0, -1, 10) + 1)\n        | summarize MetricValue=round(avg(CounterValue)) by CounterName, AppName\n        | join (Perf\n                | where InstanceName contains AppName\n                | where InstanceName contains ClusterName\n                | where CounterName == \"cpuLimitNanoCores\"\n                | where TimeGenerated > AvgDuration\n                | extend AppName = substring(InstanceName, indexof((InstanceName), \"/\", 0, -1, 10) + 1)\n                | summarize arg_max(TimeGenerated, *) by AppName, CounterName\n                | project Limit = CounterValue, TimeGenerated, CounterPath, AppName)\n                on AppName\n        | project MetricValue, Threshold = Limit * ThresholdCoefficient\n      threshold: \"10.7\"\n      activationThreshold: \"1.7\"\n      # Alternatively, you can use existing environment variables to read configuration from:\n      # See details in \"Parameter list\" section\n      workspaceIdFromEnv: LOG_ANALYTICS_WORKSPACE_ID_ENV_NAME # Optional. You can use this instead of `workspaceId` parameter.\n      clientIdFromEnv: SERVICE_PRINCIPAL_CLIENT_ID_ENV_NAME # Optional. You can use this instead of `clientId` parameter.\n      tenantIdFromEnv: AZURE_AD_TENANT_ID_ENV_NAME # Optional. You can use this instead of `tenantId` parameter.\n      clientSecretFromEnv: SERVICE_PRINCIPAL_PASSWORD_ENV_NAME # Optional. You can use this instead of `clientSecret` parameter.\n      # Optional (Default: AzurePublicCloud)\n      cloud: Private\n      # Required when cloud = Private\n      logAnalyticsResourceURL: https://api.loganalytics.airgap.io/\n      # Required when cloud = Private.\n      activeDirectoryEndpoint: https://login.airgap.example/\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/azure-log-analytics",
    "title": "Azure Log Analytics (2)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: kedaloganalytics\n  namespace: kedaloganalytics\n  labels:\n    app: kedaloganalytics\ntype: Opaque\ndata:\n  tenantId: \"QVpVUkVfQURfVEVOQU5UX0lE\" #Base64 encoded Azure Active Directory tenant id\n  clientId: \"U0VSVklDRV9QUklOQ0lQQUxfQ0xJRU5UX0lE\" #Base64 encoded Application id from your Azure AD Application/service principal\n  clientSecret: \"U0VSVklDRV9QUklOQ0lQQUxfUEFTU1dPUkQ=\" #Base64 encoded Password from your Azure AD Application/service principal\n  workspaceId: \"TE9HX0FOQUxZVElDU19XT1JLU1BBQ0VfSUQ=\" #Base64 encoded Log Analytics workspace id\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: trigger-auth-kedaloganalytics\n  namespace: kedaloganalytics\nspec:\n  secretTargetRef:\n    - parameter: tenantId\n      name: kedaloganalytics\n      key: tenantId\n    - parameter: clientId\n      name: kedaloganalytics\n      key: clientId\n    - parameter: clientSecret\n      name: kedaloganalytics\n      key: clientSecret\n    - parameter: workspaceId\n      name: kedaloganalytics\n      key: workspaceId\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: kedaloganalytics-consumer-scaled-object\n  namespace: kedaloganalytics\n  labels:\n    deploymentName: kedaloganalytics-consumer\nspec:\n  scaleTargetRef:\n    kind: #Optional: Default: Deployment, Available Options: ReplicaSet, Deployment, DaemonSet, StatefulSet\n    name: kedaloganalytics-consumer\n  pollingInterval: 30\n  cooldownPeriod: 30\n  minReplicaCount: 1\n  maxReplicaCount: 10\n  triggers:\n  - type: azure-log-analytics\n    metadata:\n      query: |\n        let AppName = \"web\";\n        let ClusterName = \"demo-cluster\";\n        let AvgDuration = ago(10m);\n        let ThresholdCoefficient = 0.8;\n        Perf\n        | where InstanceName contains AppName\n        | where InstanceName contains ClusterName\n        | where CounterName == \"cpuUsageNanoCores\"\n        | where TimeGenerated > AvgDuration\n        | extend AppName = substring(InstanceName, indexof((InstanceName), \"/\", 0, -1, 10) + 1)\n        | summarize MetricValue=round(avg(CounterValue)) by CounterName, AppName\n        | join (Perf\n                | where InstanceName contains AppName\n                | where InstanceName contains ClusterName\n                | where CounterName == \"cpuLimitNanoCores\"\n                | where TimeGenerated > AvgDuration\n                | extend AppName = substring(InstanceName, indexof((InstanceName), \"/\", 0, -1, 10) + 1)\n                | summarize arg_max(TimeGenerated, *) by AppName, CounterName\n                | project Limit = CounterValue, TimeGenerated, CounterPath, AppName)\n                on AppName\n        | project MetricValue, Threshold = Limit * ThresholdCoefficient\n      threshold: \"1900000000\"\n    authenticationRef:\n      name: trigger-auth-kedaloganalytics\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/azure-log-analytics",
    "title": "Azure Log Analytics (3)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: trigger-auth-kedaloganalytics\n  namespace: kedaloganalytics\nspec:\n  podIdentity:\n    provider: azure | azure-workload\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: kedaloganalytics-consumer-scaled-object\n  namespace: kedaloganalytics\n  labels:\n    deploymentName: kedaloganalytics-consumer\nspec:\n  scaleTargetRef:\n    kind: #Optional: Default: Deployment, Available Options: ReplicaSet, Deployment, DaemonSet, StatefulSet\n    name: kedaloganalytics-consumer\n  pollingInterval: 30\n  cooldownPeriod: 30\n  minReplicaCount: 1\n  maxReplicaCount: 10\n  triggers:\n  - type: azure-log-analytics\n    metadata:\n      workspaceId: \"81963c40-af2e-47cd-8e72-3002e08aa2af\"\n      query: |\n        let AppName = \"web\";\n        let ClusterName = \"demo-cluster\";\n        let AvgDuration = ago(10m);\n        let ThresholdCoefficient = 0.8;\n        Perf\n        | where InstanceName contains AppName\n        | where InstanceName contains ClusterName\n        | where CounterName == \"cpuUsageNanoCores\"\n        | where TimeGenerated > AvgDuration\n        | extend AppName = substring(InstanceName, indexof((InstanceName), \"/\", 0, -1, 10) + 1)\n        | summarize MetricValue=round(avg(CounterValue)) by CounterName, AppName\n        | join (Perf\n                | where InstanceName contains AppName\n                | where InstanceName contains ClusterName\n                | where CounterName == \"cpuLimitNanoCores\"\n                | where TimeGenerated > AvgDuration\n                | extend AppName = substring(InstanceName, indexof((InstanceName), \"/\", 0, -1, 10) + 1)\n                | summarize arg_max(TimeGenerated, *) by AppName, CounterName\n                | project Limit = CounterValue, TimeGenerated, CounterPath, AppName)\n                on AppName\n        | project MetricValue, Threshold = Limit * ThresholdCoefficient\n      threshold: \"1900000000\"\n    authenticationRef:\n      name: trigger-auth-kedaloganalytics\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/azure-monitor",
    "title": "Azure Monitor (1)",
    "example": "triggers:\n- type: azure-monitor\n  metadata:\n    resourceURI: Microsoft.ContainerService/managedClusters/azureMonitorCluster\n    tenantId: xxx-xxx-xxx-xxx-xxx\n    subscriptionId: yyy-yyy-yyy-yyy-yyy\n    resourceGroupName: azureMonitor\n    metricName: kube_pod_status_ready\n    metricFilter: namespace eq 'default'\n    metricAggregationInterval: \"0:1:0\"\n    targetValue: \"0.5\"\n    activationTargetValue: \"3.5\"\n    activeDirectoryClientId: <client id value> # Optional, can use TriggerAuthentication as well\n    activeDirectoryClientIdFromEnv: CLIENT_ID_ENV_NAME # Optional, can use TriggerAuthentication as well\n    activeDirectoryClientPasswordFromEnv: CLIENT_PASSWORD_ENV_NAME # Optional, can use TriggerAuthentication as well\n    # Optional (Default: AzurePublicCloud)\n    cloud: Private\n    # Required when cloud = Private\n    azureResourceManagerEndpoint: https://management.azure.airgap.com/\n    # Required when cloud = Private.\n    activeDirectoryEndpoint: https://login.airgap.example/\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/azure-monitor",
    "title": "Azure Monitor (2)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: azure-monitor-secrets\ndata:\n  activeDirectoryClientId: <clientId>\n  activeDirectoryClientPassword: <clientPassword>\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: azure-monitor-trigger-auth\nspec:\n  secretTargetRef:\n    - parameter: activeDirectoryClientId\n      name: azure-monitor-secrets\n      key: activeDirectoryClientId\n    - parameter: activeDirectoryClientPassword\n      name: azure-monitor-secrets\n      key: activeDirectoryClientPassword\n  # or Pod Identity, kind: Secret is not required in case of pod Identity\n  podIdentity:\n      provider: azure | azure-workload\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: azure-monitor-scaler\nspec:\n  scaleTargetRef:\n    name: azure-monitor-example\n  minReplicaCount: 1\n  maxReplicaCount: 10\n  triggers:\n  - type: azure-monitor\n    metadata:\n      resourceURI: Microsoft.ContainerService/managedClusters/azureMonitorCluster\n      tenantId: xxx-xxx-xxx-xxx-xxx\n      subscriptionId: yyy-yyy-yyy-yyy-yyy\n      resourceGroupName: azureMonitor\n      metricName: pod_custom_metric\n      metricNamespace: pod_custom_metrics_namespace # required when monitoring custom metrics\n      metricFilter: namespace eq 'default'\n      metricAggregationInterval: \"0:1:0\"\n      metricAggregationType: Average\n      targetValue: \"1\"\n    authenticationRef:\n      name: azure-monitor-trigger-auth\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/azure-pipelines",
    "title": "Azure Pipelines (1)",
    "example": "triggers:\n  - type: azure-pipelines\n    metadata:\n      # Optional: Name of the pool in Azure DevOps\n      poolName: \"{agentPoolName}\"\n      # Optional: Learn more in 'How to determine your pool ID'\n      poolID: \"{agentPoolId}\"\n      # Optional: Azure DevOps organization URL, can use TriggerAuthentication as well\n      organizationURLFromEnv: \"AZP_URL\"\n      # Optional: Azure DevOps Personal Access Token, can use TriggerAuthentication as well\n      personalAccessTokenFromEnv: \"AZP_TOKEN\"\n      # Optional: Target queue length\n      targetPipelinesQueueLength: \"1\" # Default 1\n      activationTargetPipelinesQueueLength: \"5\" # Default 0\n      # Optional: Parent template to read demands from\n      parent: \"{parent ADO agent name}\"\n      # Optional: Demands string to read demands from ScaledObject\n      demands: \"{demands}\"\n    authenticationRef:\n     name: pipeline-trigger-auth\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/azure-pipelines",
    "title": "Azure Pipelines (2)",
    "example": "    pool:\n      - name: \"{agentPoolName}\"\n        demands: \n          - example-demands\n          - another-demand -equals /bin/executable\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/azure-pipelines",
    "title": "Azure Pipelines (3)",
    "example": "apiVersion: v1\nkind: Secret\ntype: Opaque\nmetadata:\n  name: pipeline-auth\ndata:\n  personalAccessToken: <encoded personalAccessToken>\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: pipeline-trigger-auth\n  namespace: default\nspec:\n  secretTargetRef:\n    - parameter: personalAccessToken\n      name: pipeline-auth\n      key: personalAccessToken\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: azure-pipelines-scaledobject\n  namespace: default\nspec:\n  scaleTargetRef:\n    name: azdevops-deployment\n  minReplicaCount: 1\n  maxReplicaCount: 5\n  triggers:\n  - type: azure-pipelines\n    metadata:\n      poolID: \"1\"\n      organizationURLFromEnv: \"AZP_URL\"\n      parent: \"example-keda-template\"\n      demands: \"maven,docker\"      \n    authenticationRef:\n     name: pipeline-trigger-auth\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/azure-pipelines",
    "title": "Azure Pipelines (4)",
    "example": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: agent\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: agent\n  spec:\n    containers:\n      - name: agent\n        image: [SAME AS SCALED JOB]\n        envFrom:\n          - secretRef:\n              name: ado-pat-tokens\n        env:\n          - name: AZP_AGENT_NAME\n            value: example-keda-template # Matches Scaled Job Parent\n          \n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/azure-service-bus",
    "title": "Azure Service Bus (1)",
    "example": "triggers:\n- type: azure-servicebus\n  metadata:\n    # Required: queueName OR topicName and subscriptionName\n    queueName: functions-sbqueue\n    # or\n    topicName: functions-sbtopic\n    subscriptionName: sbtopic-sub1\n    # Optional, required when pod identity is used\n    namespace: service-bus-namespace\n    # Optional, can use TriggerAuthentication as well\n    connectionFromEnv: SERVICEBUS_CONNECTIONSTRING_ENV_NAME\n    # Optional\n    messageCount: \"5\" # Optional. Count of messages to trigger scaling on. Default: 5 messages\n    activationMessageCount: \"2\"\n    cloud: Private # Optional. Default: AzurePublicCloud\n    endpointSuffix: servicebus.airgap.example # Required when cloud=Private\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/azure-service-bus",
    "title": "Azure Service Bus (2)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: azure-servicebus-auth\nspec:\n  podIdentity:\n    provider: azure | azure-workload\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: azure-servicebus-queue-scaledobject\n  namespace: default\nspec:\n  scaleTargetRef:\n    name: azure-servicebus-queue-function\n  triggers:\n  - type: azure-servicebus\n    metadata:\n      # Required: queueName OR topicName and subscriptionName\n      queueName: functions-sbqueue\n      # or\n      topicName: functions-sbtopic\n      subscriptionName: sbtopic-sub1\n      # Required: Define what Azure Service Bus to authenticate to with Managed Identity\n      namespace: service-bus-namespace\n      # Optional\n      messageCount: \"5\" # default 5\n      cloud: AzureGermanCloud # Optional. Default: AzurePublicCloud\n    authenticationRef:\n        name: azure-servicebus-auth # authenticationRef would need either podIdentity or define a connection parameter\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/azure-storage-blob",
    "title": "Azure Blob Storage (1)",
    "example": "triggers:\n- type: azure-blob\n  metadata:\n    blobContainerName: functions-blob\n    blobCount: '5'\n    activationBlobCount: '50'\n    connectionFromEnv: STORAGE_CONNECTIONSTRING_ENV_NAME\n    accountName: storage-account-name\n    blobPrefix: myprefix\n    blobDelimiter: /example\n    cloud: Private\n    endpointSuffix: blob.core.airgap.example # Required when cloud=Private\n    recursive: false\n    globPattern: glob-pattern\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/azure-storage-blob",
    "title": "Azure Blob Storage (2)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: azure-blob-auth\nspec:\n  podIdentity:\n    provider: azure | azure-workload\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: azure-blob-scaledobject\n  namespace: default\nspec:\n  scaleTargetRef:\n    name: azureblob-function\n  triggers:\n  - type: azure-blob\n    metadata:\n      # Required\n      blobContainerName: functionsblob\n      # Optional, required when pod identity is used\n      accountName: storage-account-name\n      # Optional, connection OR authenticationRef that defines the connection\n      connectionFromEnv: STORAGE_CONNECTIONSTRING_ENV_NAME # Reference to a connection string in deployment\n      # or authenticationRef as defined below\n      #\n      # Optional\n      blobCount: \"5\" # default 5\n      blobPrefix: blobsubpath # Default : \"\"\n      blobDelimiter: \"/\" # Default: \"/\"\n      # Optional, default: AzurePublicCloud\n      cloud: AzureChinaCloud\n    authenticationRef:\n        name: azure-blob-auth # authenticationRef would need either podIdentity or define a connection parameter\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/azure-storage-queue",
    "title": "Azure Storage Queue (1)",
    "example": "triggers:\n- type: azure-queue\n  metadata:\n    queueName: orders\n    queueLength: '5'\n    activationQueueLength: '50'\n    connectionFromEnv: STORAGE_CONNECTIONSTRING_ENV_NAME\n    accountName: storage-account-name\n    cloud: AzureUSGovernmentCloud\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/azure-storage-queue",
    "title": "Azure Storage Queue (2)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: azure-queue-auth\nspec:\n  podIdentity:\n    provider: azure | azure-workload\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: azure-queue-scaledobject\n  namespace: default\nspec:\n  scaleTargetRef:\n    name: azurequeue-function\n  triggers:\n  - type: azure-queue\n    metadata:\n      # Required\n      queueName: functionsqueue\n      # Optional, required when pod identity is used\n      accountName: storage-account-name\n      # Optional: connection OR authenticationRef that defines connection\n      connectionFromEnv: STORAGE_CONNECTIONSTRING_ENV_NAME # Default: AzureWebJobsStorage. Reference to a connection string in deployment\n      # or authenticationRef as defined below\n      #\n      # Optional\n      queueLength: \"5\" # default 5\n      cloud: Private\n      endpointSuffix: queue.local.azurestack.external # Required when cloud=Private\n    authenticationRef:\n        name: azure-queue-auth # authenticationRef would need either podIdentity or define a connection parameter\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/cassandra",
    "title": "Cassandra (1)",
    "example": "triggers:\n  - type: cassandra\n    metadata:\n      username: \"cassandra\"\n      port: \"9042\"\n      clusterIPAddress: \"cassandra.default\"\n      consistency: \"Quorum\"\n      protocolVersion: \"4\"\n      keyspace: \"test_keyspace\"\n      query: \"SELECT COUNT(*) FROM test_keyspace.test_table;\"\n      targetQueryValue: \"1\"\n      activationTargetQueryValue: \"10\"\n      metricName: \"test_keyspace\"\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/cassandra",
    "title": "Cassandra (2)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: cassandra-secrets\ntype: Opaque\ndata:\n  cassandra_password: CASSANDRA_PASSWORD\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-trigger-auth-cassandra-secret\nspec:\n  secretTargetRef:\n  - parameter: password\n    name: cassandra-secrets\n    key: cassandra_password\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: cassandra-scaledobject\nspec:\n  scaleTargetRef:\n    name: nginx-deployment\n  triggers:\n  - type: cassandra\n    metadata:\n      username: \"cassandra\"\n      port: \"9042\"\n      clusterIPAddress: \"cassandra.default\"\n      consistency: \"Quorum\"\n      protocolVersion: \"4\"\n      query: \"SELECT COUNT(*) FROM test_keyspace.test_table;\"\n      targetQueryValue: \"1\"\n      metricName: \"test_keyspace\"\n    authenticationRef:\n      name: keda-trigger-auth-cassandra-secret\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/cpu",
    "title": "CPU (1)",
    "example": "triggers:\n- type: cpu\n  metricType: Utilization # Allowed types are 'Utilization' or 'AverageValue'\n  metadata:\n    type: Utilization # Deprecated in favor of trigger.metricType; allowed types are 'Utilization' or 'AverageValue'\n    value: \"60\"\n    containerName: \"\" # Optional. You can use this to target a specific container in a pod\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/cpu",
    "title": "CPU (2)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: cpu-scaledobject\n  namespace: default\nspec:\n  scaleTargetRef:\n    name: my-deployment\n  triggers:\n  - type: cpu\n    metricType: Utilization # Allowed types are 'Utilization' or 'AverageValue'\n    metadata:\n      value: \"50\"\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/cpu",
    "title": "CPU (3)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: cpu-scaledobject\n  namespace: default\nspec:\n  scaleTargetRef:\n    name: my-deployment\n  triggers:\n  - type: cpu\n    metricType: Utilization # Allowed types are 'Utilization' or 'AverageValue'\n    metadata:\n      value: \"50\"\n      containerName: \"api\"\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/cron",
    "title": "Cron (1)",
    "example": "triggers:\n- type: cron\n  metadata:\n    # Required\n    timezone: Asia/Kolkata  # The acceptable values would be a value from the IANA Time Zone Database.\n    start: 30 * * * *       # Every hour on the 30th minute\n    end: 45 * * * *         # Every hour on the 45th minute\n    desiredReplicas: \"10\"\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/cron",
    "title": "Cron (2)",
    "example": "> start: 30 * * * *\n> end: 30 * * * *\n>```\n\n### How does it work?\n\nThe CRON scaler allows you to define a time range in which you want to scale your workloads out/in.\n\nWhen the time window starts, it will scale from the minimum number of replicas to the desired number of replicas based on your configuration.\n\n![](/img/scalers/cron/how-it-works.png)\n\nWhat the CRON scaler does **not** do, is scale your workloads based on a recurring schedule.\n\n### Example\n\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/datadog",
    "title": "Datadog (1)",
    "example": "triggers:\n- type: datadog\n  metricType: Value\n  metadata:\n    query: \"sum:trace.redis.command.hits{env:none,service:redis}.as_count()\"\n    queryValue: \"7.75\"\n    activationQueryValue: \"1.1\"\n    type: \"global\" # Deprecated in favor of trigger.metricType\n    age: \"120\"\n    metricUnavailableValue: \"1.5\"\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/datadog",
    "title": "Datadog (2)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: datadog-secrets\n  namespace: my-project\ntype: Opaque\ndata:\n  apiKey: # Required: base64 encoded value of Datadog apiKey\n  appKey: # Required: base64 encoded value of Datadog appKey\n  datadogSite: # Optional: base64 encoded value of Datadog site\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-trigger-auth-datadog-secret\n  namespace: my-project\nspec:\n  secretTargetRef:\n    # Required: API key for your Datadog account\n  - parameter: apiKey\n    name: datadog-secrets\n    key: apiKey\n    # Required: APP key for your Datadog account\n  - parameter: appKey\n    name: datadog-secrets\n    key: appKey\n    # Optional: Datadog site. Default: \"datadoghq.com\"\n  - parameter: datadogSite\n    name: datadog-secrets\n    key: datadogSite\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: datadog-scaledobject\n  namespace: my-project\nspec:\n  scaleTargetRef:\n    name: worker\n  triggers:\n  - type: datadog\n    # Optional: (Value or AverageValue). Whether the target value is global or average per pod. Default: AverageValue\n    metricType: \"Value\"\n    metadata:\n      # Required: datadog metric query\n      query: \"sum:trace.redis.command.hits{env:none,service:redis}.as_count()\"\n      # Required: according to the number of query result, to scale the TargetRef\n      queryValue: \"7\"\n      # Optional: The time window (in seconds) to retrieve metrics from Datadog. Default: 90\n      age: \"120\"\n      # Optional: The metric value to return to the HPA if a metric value wasn't found for the specified time window\n      metricUnavailableValue: \"0\"\n    authenticationRef:\n      name: keda-trigger-auth-datadog-secret\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/elasticsearch",
    "title": "Elasticsearch (1)",
    "example": "triggers:\n  - type: elasticsearch\n    metadata:\n      addresses: \"http://localhost:9200\"\n      username: \"elastic\"\n      passwordFromEnv: \"ELASTIC_PASSWORD\"\n      index: \"my-index\"\n      searchTemplateName: \"my-search-template-name\"\n      parameters: \"param1:value1;param2:value2\"\n      valueLocation: \"hits.total.value\"\n      targetValue: \"1.1\"\n      activationTargetValue: \"5.5\"\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/elasticsearch",
    "title": "Elasticsearch (2)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: elasticsearch-secrets\ntype: Opaque\ndata:\n  password: cGFzc3cwcmQh\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-trigger-auth-elasticsearch-secret\nspec:\n  secretTargetRef:\n  - parameter: password\n    name: elasticsearch-secrets\n    key: password\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: elasticsearch-scaledobject\nspec:\n  scaleTargetRef:\n    name: \"deployment-name\"\n  triggers:\n    - type: elasticsearch\n      metadata:\n        addresses: \"http://localhost:9200\"\n        username: \"elastic\"\n        index: \"my-index\"\n        searchTemplateName: \"my-search-template\"\n        valueLocation: \"hits.total.value\"\n        targetValue: \"10\"\n        params: \"dummy_value:1\"\n      authenticationRef:\n        name: keda-trigger-auth-elasticsearch-secret\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/external-push",
    "title": "External Push (1)",
    "example": "triggers:\n- type: external-push\n  metadata:\n    scalerAddress: external-scaler-service:8080\n    tlsCertFile: /path/to/tls/cert.pem # optional\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/external-push",
    "title": "External Push (2)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: name\n  namespace: namespace\nspec:\n  scaleTargetRef:\n    name: keda-node\n  triggers:\n  - type: external-push\n    metadata:\n      scalerAddress: external-scaler-service:8080\n      tlsCertFile: /path/to/tls/cert.pem # optional\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/external",
    "title": "External (1)",
    "example": "triggers:\n- type: external\n  metadata:\n    scalerAddress: external-scaler-service:8080\n    tlsCertFile : /path/to/tls/cert.pem\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/external",
    "title": "External (2)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: redis-scaledobject\n  namespace: keda-redis-test\nspec:\n  scaleTargetRef:\n    name: keda-redis-node\n  triggers:\n  - type: external\n    metadata:\n      scalerAddress: redis-external-scaler-service:8080\n      address: REDIS_HOST\n      password: REDIS_PASSWORD\n      listName: mylist\n      listLength: \"5\"\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/gcp-pub-sub",
    "title": "Google Cloud Platform‎ Pub/Sub (1)",
    "example": "triggers:\n- type: gcp-pubsub\n  metadata:\n    subscriptionSize: \"5\" # Deprecated, use mode and value fields instead\n    mode: \"SubscriptionSize\" # Optional - Default is SubscriptionSize - SubscriptionSize or OldestUnackedMessageAge\n    value: \"5\" # Optional - Default is 5 for SubscriptionSize | Default is 10 for OldestUnackedMessageAge\n    activationValue: \"10\" # Optional - Default is 0\n    subscriptionName: \"mysubscription\" # Required\n    credentialsFromEnv: GOOGLE_APPLICATION_CREDENTIALS_JSON # Required\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/gcp-pub-sub",
    "title": "Google Cloud Platform‎ Pub/Sub (2)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: pubsub-scaledobject\n  namespace: keda-pubsub-test\nspec:\n  scaleTargetRef:\n    name: keda-pubsub-go\n  triggers:\n  - type: gcp-pubsub\n    metadata:\n      mode: \"SubscriptionSize\"\n      value: \"5\"\n      subscriptionName: \"mysubscription\" # Required\n      credentialsFromEnv: GOOGLE_APPLICATION_CREDENTIALS_JSON # Required\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/gcp-pub-sub",
    "title": "Google Cloud Platform‎ Pub/Sub (3)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-trigger-auth-gcp-credentials\nspec:\n  secretTargetRef:\n  - parameter: GoogleApplicationCredentials\n    name: pubsub-secret        # Required. Refers to the name of the secret\n    key: GOOGLE_APPLICATION_CREDENTIALS_JSON       # Required.\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: pubsub-scaledobject\nspec:\n  scaleTargetRef:\n    name: keda-pubsub-go\n  triggers:\n  - type: gcp-pubsub\n    authenticationRef:\n      name: keda-trigger-auth-gcp-credentials\n    metadata:\n      subscriptionName: \"input\" # Required\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/gcp-pub-sub",
    "title": "Google Cloud Platform‎ Pub/Sub (4)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-trigger-auth-gcp-credentials\nspec:\n  podIdentity:\n    provider: gcp\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: pubsub-scaledobject\nspec:\n  scaleTargetRef:\n    name: keda-pubsub-go\n  triggers:\n  - type: gcp-pubsub\n    authenticationRef:\n      name: keda-trigger-auth-gcp-credentials\n    metadata:\n      subscriptionName: \"input\" # Required\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/gcp-pub-sub",
    "title": "Google Cloud Platform‎ Pub/Sub (5)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: ClusterTriggerAuthentication\nmetadata:\n  name: keda-clustertrigger-auth-gcp-credentials\nspec:\n  podIdentity:\n    provider: gcp\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: pubsub-scaledobject\nspec:\n  scaleTargetRef:\n    name: keda-pubsub-go\n  triggers:\n  - type: gcp-pubsub\n    authenticationRef:\n      name: keda-clustertrigger-auth-gcp-credentials\n      kind: ClusterTriggerAuthentication\n    metadata:\n      subscriptionName: \"input\" # Required\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/gcp-stackdriver",
    "title": "Google Cloud Platform Stackdriver (1)",
    "example": "triggers:\n- type: gcp-stackdriver\n  metadata:\n    projectId: my-project-id\n    filter: 'metric.type=\"storage.googleapis.com/network/received_bytes_count\" AND resource.type=\"gcs_bucket\" AND metric.label.method=\"WriteObject\" AND resource.label.bucket_name=\"my-gcp-bucket\"'\n    targetValue: '100'\n    activationTargetValue: \"10\" # Optional - Default is 0\n    credentialsFromEnv: GOOGLE_APPLICATION_CREDENTIALS_JSON\n    alignmentPeriodSeconds: '60'\n    alignmentAligner: mean\n    alignmentReducer: none\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/gcp-stackdriver",
    "title": "Google Cloud Platform Stackdriver (2)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: gcp-stackdriver-scaledobject\n  namespace: keda-gcp-stackdriver-test\nspec:\n  scaleTargetRef:\n    name: keda-gcp-stackdriver-go\n  triggers:\n  - type: gcp-stackdriver\n    metadata:\n      projectId: my-project-id\n      filter: 'metric.type=\"storage.googleapis.com/network/received_bytes_count\" AND resource.type=\"gcs_bucket\" AND metric.label.method=\"WriteObject\" AND resource.label.bucket_name=\"my-gcp-bucket\"'\n      targetValue: \"5\"\n      credentialsFromEnv: GOOGLE_APPLICATION_CREDENTIALS_JSON\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/gcp-stackdriver",
    "title": "Google Cloud Platform Stackdriver (3)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-trigger-auth-gcp-credentials\nspec:\n  secretTargetRef:\n  - parameter: GoogleApplicationCredentials\n    name: gcp-stackdriver-secret        # Required. Refers to the name of the secret\n    key: GOOGLE_APPLICATION_CREDENTIALS_JSON       # Required.\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: gcp-stackdriver-scaledobject\nspec:\n  scaleTargetRef:\n    name: keda-gcp-stackdriver-go\n  triggers:\n  - type: gcp-stackdriver\n    authenticationRef:\n      name: keda-trigger-auth-gcp-credentials\n    metadata:\n      projectId: my-project-id\n      filter: 'metric.type=\"storage.googleapis.com/network/received_bytes_count\" AND resource.type=\"gcs_bucket\" AND metric.label.method=\"WriteObject\" AND resource.label.bucket_name=\"my-gcp-bucket\"'\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/gcp-stackdriver",
    "title": "Google Cloud Platform Stackdriver (4)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-trigger-auth-gcp-credentials\nspec:\n  podIdentity:\n    provider: gcp\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: gcp-stackdriver-scaledobject\nspec:\n  scaleTargetRef:\n    name: keda-gcp-stackdriver-go\n  triggers:\n  - type: gcp-stackdriver\n    authenticationRef:\n      name: keda-trigger-auth-gcp-credentials\n    metadata:\n      projectId: my-project-id\n      filter: 'metric.type=\"storage.googleapis.com/network/received_bytes_count\" AND resource.type=\"gcs_bucket\" AND metric.label.method=\"WriteObject\" AND resource.label.bucket_name=\"my-gcp-bucket\"'\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/gcp-storage",
    "title": "Google Cloud Platform Storage (1)",
    "example": "triggers:\n- type: gcp-storage\n  metadata:\n    bucketName: test-bucket\n    targetObjectCount: '100'\n    activationTargetObjectCount: '10' # Optional\n    maxBucketItemsToScan: '1000'\n    credentialsFromEnv: GOOGLE_APPLICATION_CREDENTIALS_JSON # Optional\n    credentialsFromEnvFile: GOOGLE_APPLICATION_CREDENTIALS_JSON # Optional\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/gcp-storage",
    "title": "Google Cloud Platform Storage (2)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: gcp-storage-scaledobject\n  namespace: keda-gcp-storage-test\nspec:\n  scaleTargetRef:\n    name: keda-gcp-storage-go\n  triggers:\n  - type: gcp-storage\n    metadata:\n      bucketName: \"Transactions\"\n      targetObjectCount: \"5\"\n      credentialsFromEnv: GOOGLE_APPLICATION_CREDENTIALS_JSON\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/gcp-storage",
    "title": "Google Cloud Platform Storage (3)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-trigger-auth-gcp-credentials\nspec:\n  secretTargetRef:\n  - parameter: GoogleApplicationCredentials\n    name: gcp-storage-secret        # Required. Refers to the name of the secret\n    key: GOOGLE_APPLICATION_CREDENTIALS_JSON       # Required.\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: gcp-storage-scaledobject\nspec:\n  scaleTargetRef:\n    name: keda-gcp-storage-go\n  triggers:\n  - type: gcp-storage\n    authenticationRef:\n      name: keda-trigger-auth-gcp-credentials\n    metadata:\n      bucketName: \"Transactions\"\n      targetObjectCount: \"5\"\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/gcp-storage",
    "title": "Google Cloud Platform Storage (4)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-trigger-auth-gcp-credentials\nspec:\n  podIdentity:\n    provider: gcp\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: gcp-storage-scaledobject\nspec:\n  scaleTargetRef:\n    name: keda-gcp-storage-go\n  triggers:\n  - type: gcp-storage\n    authenticationRef:\n      name: keda-trigger-auth-gcp-credentials\n    metadata:\n      bucketName: \"Transactions\"\n      targetObjectCount: \"5\"\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/graphite",
    "title": "Graphite (1)",
    "example": "triggers:\n- type: graphite\n  metadata:\n    # Required\n    serverAddress: http://<graphite-host>:81\n    metricName: request-count # Note: name to identify the metric\n    query: stats.counters.http.hello-world.request.count.count # Note: query must return a vector/scalar single element response\n    threshold: '10.5'\n    activationThreshold: '5'\n    queryTime: '-10Minutes' # Note: Query time in from argv Seconds/Minutes/Hours\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/graphite",
    "title": "Graphite (2)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: graphite-scaledobject\n  namespace: default\nspec:\n  scaleTargetRef:\n    name: my-deployment\n  triggers:\n  - type: graphite\n    metadata:\n      serverAddress: http://<graphite-host>:81\n      metricName: LagMetric\n      threshold: '100'\n      query: maxSeries(keepLastValue(reportd.*.gauge.detect.latest_max_time.value, 1))\n      queryTime: '-1Minutes'\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/graphite",
    "title": "Graphite (3)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: keda-graphite-secret\n  namespace: default\ndata:\n  username: \"dXNlcm5hbWUK\" # Must be base64\n  password: \"cGFzc3dvcmQK\"\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-graphite-creds\n  namespace: default\nspec:\n  secretTargetRef:\n    - parameter: username\n      name: keda-graphite-secret\n      key: username\n    - parameter: password\n      name: keda-graphite-secret\n      key: password\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: graphite-scaledobject\n  namespace: default\n  labels:\n    deploymentName: php-apache-graphite\nspec:\n  cooldownPeriod: 10\n  maxReplicaCount: 5\n  minReplicaCount: 0\n  pollingInterval: 5\n  scaleTargetRef:\n    name: php-apache-graphite\n  triggers:\n  - type: graphite\n    metadata:\n      authMode: \"basic\"\n      metricName: https_metric\n      query: https_metric\n      queryTime: -1Hours\n      serverAddress: http://<graphite server>:81\n      threshold: \"100\"\n    authenticationRef:\n        name: keda-graphite-creds\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/huawei-cloudeye",
    "title": "Huawei Cloudeye (1)",
    "example": "triggers:\n- type: huawei-cloudeye\n  metadata:\n    namespace: SYS.ELB\n    metricName: mb_l7_qps\n    dimensionName: lbaas_instance_id\n    dimensionValue: 5e052238-0346-xxb0-86ea-92d9f33e29d2\n    targetMetricValue: \"5.5\"\n    activationTargetMetricValue: \"1.5\"\n    minMetricValue: \"1.1\" # Deprecated\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/huawei-cloudeye",
    "title": "Huawei Cloudeye (2)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: keda-huawei-secrets\n  namespace: keda-test\ndata:\n  IdentityEndpoint: <IdentityEndpoint>\n  ProjectID: <ProjectID>\n  DomainID: <DomainID>\n  Region: <Region>\n  Domain: <Domain>\n  AccessKey: <AccessKey>\n  SecretKey: <SecretKey>\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-trigger-auth-huawei-credential\n  namespace: keda-test\nspec:\n  secretTargetRef:\n  - parameter: IdentityEndpoint      # Required.\n    name: keda-huawei-secrets        # Required.\n    key: IdentityEndpoint            # Required.\n  - parameter: ProjectID             # Required.\n    name: keda-huawei-secrets        # Required.\n    key: ProjectID                   # Required.\n  - parameter: DomainID              # Required.\n    name: keda-huawei-secrets        # Required.\n    key: DomainID                    # Required.\n  - parameter: Region                # Required.\n    name: keda-huawei-secrets        # Required.\n    key: Region                      # Required.\n  - parameter: Domain                # Required.\n    name: keda-huawei-secrets        # Required.\n    key: Domain                      # Required.\n  - parameter: AccessKey             # Required.\n    name: keda-huawei-secrets        # Required.\n    key: AccessKey                   # Required.\n  - parameter: SecretKey             # Required.\n    name: keda-huawei-secrets        # Required.\n    key: SecretKey                   # Required.\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: huawei-cloudeye-scaledobject\n  namespace: keda-test\nspec:\n  scaleTargetRef:\n    name: nginx-deployment\n  maxReplicaCount: 5\n  minReplicaCount: 2\n  triggers:\n  - type: huawei-cloudeye\n    metadata:\n      namespace: SYS.ELB\n      dimensionName: lbaas_instance_id\n      dimensionValue: 5e052238-0346-47b0-xxea-92d9f33e29d2\n      metricName: mb_l7_qps\n      targetMetricValue: \"100\"\n      minMetricValue: \"1\"\n    authenticationRef:\n      name: keda-trigger-auth-huawei-credential\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/ibm-mq",
    "title": "IBM MQ (1)",
    "example": "triggers:\n- type: ibmmq\n  metadata:\n    host: <ibm-host> # REQUIRED - IBM MQ Queue Manager Admin REST Endpoint\n    queueManager: <queue-manager> # REQUIRED - Your queue manager\n    queueName: <queue-name> # REQUIRED - Your queue name\n    tlsDisabled: <TLS enabled/disabled> # OPTIONAL - Set 'true' to disable TLS. Default: false\n    queueDepth: <queue-depth> # OPTIONAL - Queue depth target for HPA. Default: 5 messages\n    activationQueueDepth: <activation-queue-depth> # OPTIONAL - Activation queue depth target. Default: 0 messages\n    usernameFromEnv: <admin-user> # Optional: Provide admin username from env instead of as a secret\n    passwordFromEnv: <admin-password> # Optional: Provide admin password from env instead of as a secret\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/ibm-mq",
    "title": "IBM MQ (2)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: keda-ibmmq-secret\ndata:\n  ADMIN_USER: <encoded-username> # REQUIRED - Admin Username\n  ADMIN_PASSWORD: <encoded-password> # REQUIRED - Admin Password\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: ibmmq-scaledobject\n  namespace: default\n  labels:\n    deploymentName: ibmmq-deployment\nspec:\n  scaleTargetRef:\n    name: ibmmq-deployment\n  pollingInterval: 5 # OPTIONAL - Default: 30 seconds\n  cooldownPeriod: 30 # OPTIONAL - Default: 300 seconds\n  maxReplicaCount: 18 # OPTIONAL - Default: 100\n  triggers:\n    - type: ibmmq\n      metadata:\n        host: <ibm-host> # REQUIRED - IBM MQ Queue Manager Admin REST Endpoint\n        queueManager: <queue-manager> # REQUIRED - Your queue manager\n        queueName: <queue-name> # REQUIRED - Your queue name\n        tlsDisabled: <TLS enabled/disabled> # OPTIONAL - Set 'true' to disable TLS. Default: false\n        queueDepth: <queue-depth> # OPTIONAL - Queue depth target for HPA. Default: 5 messages\n        usernameFromEnv: <admin-user> # Optional: Provide admin username from env instead of as a secret\n        passwordFromEnv: <admin-password> # Optional: Provide admin password from env instead of as a secret\n      authenticationRef:\n        name: keda-ibmmq-trigger-auth\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-ibmmq-trigger-auth\n  namespace: default\nspec:\n  secretTargetRef:\n    - parameter: username\n      name: keda-ibmmq-secret\n      key: ADMIN_USER\n    - parameter: password\n      name: keda-ibmmq-secret\n      key: ADMIN_PASSWORD\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/influxdb",
    "title": "InfluxDB (1)",
    "example": "triggers:\n  - type: influxdb\n    metadata:\n      serverURL: http://influxdb:8086\n      organizationName: influx-org\n      organizationNameFromEnv: INFLUXDB_ORG_NAME # Optional: You can use this instead of `organizationName` parameter. See details in \"Parameter List\" section\n      thresholdValue: '4.4'\n      activationThresholdValue: '6.2'\n      query: |\n        from(bucket: \"bucket-of-interest\")\n        |> range(start: -12h)\n        |> filter(fn: (r) => r._measurement == \"stat\")\n      authToken: some-auth-token\n      authTokenFromEnv: INFLUXDB_AUTH_TOKEN # Optional: You can use this instead of `authToken` parameter. See details in \"Parameter List\" section\n      metricName: influx-metric # Optional: This value will default to organization name if not set by the user (metrics name value would be then `influxdb-influx_org`)\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/influxdb",
    "title": "InfluxDB (2)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: influxdb-scaledobject\n  namespace: my-project\nspec:\n  scaleTargetRef:\n    name: nginx-worker\n  triggers:\n    - type: influxdb\n      metadata:\n        serverURL: http://influxdb:8086\n        organizationNameFromEnv: INFLUXDB_ORG_NAME\n        thresholdValue: '4'\n        activationThresholdValue: '6'\n        query: |\n          from(bucket: \"bucket-of-interest\")\n          |> range(start: -12h)\n          |> filter(fn: (r) => r._measurement == \"stat\")\n        authTokenFromEnv: INFLUXDB_AUTH_TOKEN\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/kubernetes-workload",
    "title": "Kubernetes Workload (1)",
    "example": "triggers:\n- type: kubernetes-workload\n  metadata:\n    podSelector: 'app=backend'\n    value: '0.5'\n    activationValue: '3.1'\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/kubernetes-workload",
    "title": "Kubernetes Workload (2)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: workload-scaledobject\nspec:\n  scaleTargetRef:\n    name: workload-deployment\n  triggers:\n  - type: kubernetes-workload\n    metadata:\n      podSelector: 'app=backend, deploy notin (critical, monolith)'\n      value: '3'\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/liiklus-topic",
    "title": "Liiklus Topic (1)",
    "example": "triggers:\n- type: liiklus\n  metadata:\n    # Required\n    address: localhost:6565\n    group: my-group\n    topic: test-topic\n    # Optional\n    lagThreshold: \"50\"\n    # Optional\n    activationLagThreshold: \"20\"\n    groupVersion: 1\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/liiklus-topic",
    "title": "Liiklus Topic (2)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: liiklus-scaledobject\n  namespace: default\nspec:\n  scaleTargetRef:\n    name: function-deployment\n  pollingInterval: 30\n  triggers:\n  - type: liiklus\n    metadata:\n      # Required\n      address: localhost:6565\n      group: my-group       # Make sure that this consumer group name is the same one as the one that is consuming topics\n      topic: test-topic\n      # Optional\n      lagThreshold: \"50\"    # Default value is set to 10\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/memory",
    "title": "Memory (1)",
    "example": "triggers:\n- type: memory\n  metricType: Utilization # Allowed types are 'Utilization' or 'AverageValue'\n  metadata:\n    type: Utilization # Deprecated in favor of trigger.metricType; allowed types are 'Utilization' or 'AverageValue'\n    value: \"60\"\n    containerName: \"\" # Optional. You can use this to target a specific container in a pod\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/memory",
    "title": "Memory (2)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: memory-scaledobject\n  namespace: default\nspec:\n  scaleTargetRef:\n    name: my-deployment\n  triggers:\n  - type: memory\n    metricType: Utilization # Allowed types are 'Utilization' or 'AverageValue'\n    metadata:\n      value: \"50\"\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/memory",
    "title": "Memory (3)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: memory-scaledobject\n  namespace: default\nspec:\n  scaleTargetRef:\n    name: my-deployment\n  triggers:\n  - type: memory\n    metricType: Utilization # Allowed types are 'Utilization' or 'AverageValue'\n    metadata:\n      value: \"50\"\n      containerName: \"api\"\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/metrics-api",
    "title": "Metrics API (1)",
    "example": "triggers:\n- type: metrics-api\n  metadata:\n    targetValue: \"8.8\"\n    activationTargetValue: \"3.8\"\n    url: \"http://api:3232/api/v1/stats\"\n    valueLocation: \"components.worker.tasks\"\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/metrics-api",
    "title": "Metrics API (2)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: http-scaledobject\n  namespace: keda\n  labels:\n    deploymentName: dummy\nspec:\n  maxReplicaCount: 12\n  scaleTargetRef:\n    name: dummy\n  triggers:\n    - type: metrics-api\n      metadata:\n        targetValue: \"7\"\n        url: \"http://api:3232/components/stats\"\n        valueLocation: 'components.worker.tasks'\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/metrics-api",
    "title": "Metrics API (3)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: keda-metric-api-secret\n  namespace: default\ndata:\n  apiKey: \"APIKEY\"\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-metric-api-creds\n  namespace: default\nspec:\n  secretTargetRef:\n    - parameter: apiKey\n      name: keda-metric-api-secret\n      key: apiKey\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: http-scaledobject\n  namespace: keda\n  labels:\n    deploymentName: dummy\nspec:\n  maxReplicaCount: 12\n  scaleTargetRef:\n    name: dummy\n  triggers:\n    - type: metrics-api\n      metadata:\n        targetValue: \"7\"\n        url: \"http://api:3232/components/stats\"\n        valueLocation: 'components.worker.tasks'\n        authMode: \"apiKey\"\n        method: \"query\"\n        keyParamName: \"QUERY_KEY\"\n      authenticationRef:\n        name: keda-metric-api-creds\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/metrics-api",
    "title": "Metrics API (4)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: keda-metric-api-secret\n  namespace: default\ndata:\n  token: \"PlaceYourTokenHere\"\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-metric-api-creds\n  namespace: default\nspec:\n  secretTargetRef:\n    - parameter: token\n      name: keda-metric-api-secret\n      key: token\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: http-scaledobject\n  namespace: keda\n  labels:\n    deploymentName: dummy\nspec:\n  maxReplicaCount: 12\n  scaleTargetRef:\n    name: dummy\n  triggers:\n    - type: metrics-api\n      metadata:\n        targetValue: \"7\"\n        url: \"http://api:3232/components/stats\"\n        valueLocation: 'components.worker.tasks'\n        authMode: \"bearer\"\n      authenticationRef:\n        name: keda-metric-api-creds\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/metrics-api",
    "title": "Metrics API (5)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: keda-metric-api-secret\n  namespace: default\ndata:\n  username: \"username\"\n  password: \"password\"\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-metric-api-creds\n  namespace: default\nspec:\n  secretTargetRef:\n    - parameter: username\n      name: keda-metric-api-secret\n      key: username\n    - parameter: password\n      name: keda-metric-api-secret\n      key: password\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: http-scaledobject\n  namespace: keda\n  labels:\n    deploymentName: dummy\nspec:\n  maxReplicaCount: 12\n  scaleTargetRef:\n    name: dummy\n  triggers:\n    - type: metrics-api\n      metadata:\n        targetValue: \"7\"\n        url: \"http://api:3232/components/stats\"\n        valueLocation: 'components.worker.tasks'\n        authMode: \"basic\"\n      authenticationRef:\n        name: keda-metric-api-creds\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/metrics-api",
    "title": "Metrics API (6)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: keda-metric-api-secret\n  namespace: default\ndata:\n  cert: \"cert\"\n  key: \"key\"\n  ca: \"ca\"\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-metric-api-creds\n  namespace: default\nspec:\n  secretTargetRef:\n    - parameter: cert\n      name: keda-metric-api-secret\n      key: cert\n    - parameter: key\n      name: keda-metric-api-secret\n      key: key\n    - parameter: ca\n      name: keda-metric-api-secret\n      key: ca\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: http-scaledobject\n  namespace: keda\n  labels:\n    deploymentName: dummy\nspec:\n  maxReplicaCount: 12\n  scaleTargetRef:\n    name: dummy\n  triggers:\n    - type: metrics-api\n      metadata:\n        targetValue: \"7\"\n        url: \"http://api:3232/components/stats\"\n        valueLocation: 'components.worker.tasks'\n        authMode: \"tls\"\n      authenticationRef:\n        name: keda-metric-api-creds\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/mongodb",
    "title": "MongoDB (1)",
    "example": "triggers:\n  - type: mongodb\n    metadata:\n      # name of an environment variable containing a valid MongoDB connection string\n      connectionStringFromEnv: MongoDB_CONNECTION_STRING\n      # Required: database name\n      dbName: \"test\"\n      # Required: collection name\n      collection: \"test_collection\"\n      # Required: query expr, used by filter data\n      query: '{\"region\":\"eu-1\",\"state\":\"running\",\"plan\":\"planA\"}'\n      # Required: according to the number of query result, to scale the TargetRef\n      queryValue: \"1\"\n      # Optional: according to the number of query result, the scaler is active\n      activationQueryValue: \"1\"\n      # Optional: The generated metric name would be mongodb-global-metric. Here mongodb- use as a prefix for metric name\n      metricName: \"global-metric\"\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/mongodb",
    "title": "MongoDB (2)",
    "example": "triggers:\n  - type: mongodb\n    metadata:\n      # host name of the MongoDB server. Example of mongodb service: \"mongodb-svc.<namespace>.svc.cluster.local\"\n      host: mongodb-svc.default.svc.cluster.local\n      # port number of the MongoDB server.\n      port: \"27017\"\n      # username credential for connecting to the MongoDB server\n      username: test_user\n      # name of an environment variable containing a valid password for connecting to the MongoDB server\n      passwordFromEnv: MongoDB_Password\n      # Required: database name\n      dbName: \"test\"\n      # Required: collection name\n      collection: \"test_collection\"\n      # Required: query expr, used by filter data\n      query: '{\"region\":\"eu-1\",\"state\":\"running\",\"plan\":\"planA\"}'\n      # Required: according to the number of query result, to scale the TargetRef\n      queryValue: \"1\"\n      # Optional: according to the number of query result, the scaler is active\n      activationQueryValue: \"1\"\n      # Optional: The generated metric name would be mongodb-global-metric. Here mongodb- use as a prefix for metric name.\n      metricName: \"global-metric\"\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/mongodb",
    "title": "MongoDB (3)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: ScaledJob\nmetadata:\n  name: mongodb-job\nspec:\n  jobTargetRef:\n    template:\n      spec:\n        containers:\n          - name: mongodb-update\n            image: 1314520999/mongodb-update:latest\n            args:\n            - --connectStr=mongodb://test_user:test_password@mongoDB-svc.mongoDB.svc.cluster.local:27017/test\n            - --dataBase=test\n            - --collection=test_collection\n            imagePullPolicy: IfNotPresent\n        restartPolicy: Never\n    backoffLimit: 1\n  pollingInterval: 30             # Optional. Default: 30 seconds\n  maxReplicaCount: 30             # Optional. Default: 100\n  successfulJobsHistoryLimit: 0   # Optional. Default: 100. How many completed jobs should be kept.\n  failedJobsHistoryLimit: 10      # Optional. Default: 100. How many failed jobs should be kept.\n  triggers:\n    - type: mongodb\n      metadata:\n        dbName: \"test\"\n        collection: \"test_collection\"\n        query: '{\"region\":\"eu-1\",\"state\":\"running\",\"plan\":\"planA\"}'\n        queryValue: \"1\"\n        metricName: \"global-metric\"\n      authenticationRef:\n        name: mongodb-trigger\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: mongodb-trigger\nspec:\n  secretTargetRef:\n    - parameter: connectionString\n      name: mongodb-secret\n      key: connect\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mongodb-secret\ntype: Opaque\ndata:\n  connect: bW9uZ29kYjovL3Rlc3RfdXNlcjp0ZXN0X3Bhc3N3b3JkQG1vbmdvZGItc3ZjLm1vbmdvREIuc3ZjLmNsdXN0ZXIubG9jYWw6MjcwMTcvdGVzdA==\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/mssql",
    "title": "MSSQL (1)",
    "example": "triggers:\n- type: mssql\n  metadata:\n    connectionStringFromEnv: MSSQL_CONNECTION_STRING\n    query: \"SELECT COUNT(*) FROM backlog WHERE state='running' OR state='queued'\"\n    targetValue: \"5.5\"\n    activationTargetValue: '5'\n    metricName: backlog_process_count # optional - the generated value would be `mssql-{sha256hash}`\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/mssql",
    "title": "MSSQL (2)",
    "example": "triggers:\n- type: mssql\n  metadata:\n    username: \"kedaUser\"\n    passwordFromEnv: MSSQL_PASSWORD\n    host: mssqlinst.namespace.svc.cluster.local\n    port: \"1433\" # optional\n    database: test_db_name\n    query: \"SELECT COUNT(*) FROM backlog WHERE state='running' OR state='queued'\"\n    targetValue: 1\n    metricName: backlog_process_count # optional - the generated value would be `mssql-test_db_name`\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/mssql",
    "title": "MSSQL (3)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: mssql-secrets\ntype: Opaque\ndata:\n  mssql-connection-string: U2VydmVyPWV4YW1wbGUuZGF0YWJhc2Uud2luZG93cy5uZXQ7cG9ydD0xNDMzO0RhdGFiYXNlPUFkdmVudHVyZVdvcmtzO1BlcnNpc3QgU2VjdXJpdHkgSW5mbz1GYWxzZTtVc2VyIElEPXVzZXIxO1Bhc3N3b3JkPVBhc3N3b3JkIzE7RW5jcnlwdD1UcnVlO1RydXN0U2VydmVyQ2VydGlmaWNhdGU9RmFsc2U7 # base64 encoded value of MSSQL connectionString of format \"Server=example.database.windows.net;port=1433;Database=AdventureWorks;Persist Security Info=False;User ID=user1;Password=Password#1;Encrypt=True;TrustServerCertificate=False;\"\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-trigger-auth-mssql-secret\nspec:\n  secretTargetRef:\n  - parameter: connectionString\n    name: mssql-secrets\n    key: mssql-connection-string\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: mssql-scaledobject\nspec:\n  scaleTargetRef:\n    name: consumer # e.g. the name of the resource to scale\n  triggers:\n  - type: mssql\n    metadata:\n      targetValue: 1\n      query: \"SELECT COUNT(*) FROM backlog WHERE state='running' OR state='queued'\"\n    authenticationRef:\n      name: keda-trigger-auth-mssql-secret\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/mysql",
    "title": "MySQL (1)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: mysql-secrets\n  namespace: my-project\ntype: Opaque\ndata:\n  mysql_conn_str: dXNlckB0Y3AobXlzcWw6MzMwNikvc3RhdHNfZGI= # base64 encoded value of mysql connectionString of format user:password@tcp(mysql:3306)/stats_db\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-trigger-auth-mysql-secret\n  namespace: my-project\nspec:\n  secretTargetRef:\n  - parameter: connectionString\n    name: mysql-secrets\n    key: mysql_conn_str\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: mysql-scaledobject\n  namespace: my-project\nspec:\n  scaleTargetRef:\n    name: worker\n  triggers:\n  - type: mysql\n    metadata:\n      queryValue: \"4.4\"\n      activationQueryValue: \"5.4\"\n      query: \"SELECT CEIL(COUNT(*) / 6) FROM task_instance WHERE state='running' OR state='queued'\"\n    authenticationRef:\n      name: keda-trigger-auth-mysql-secret\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/nats-jetstream",
    "title": "NATS JetStream (1)",
    "example": "triggers:\n- type: nats-jetstream\n  metadata:\n    natsServerMonitoringEndpoint: \"nats.nats.svc.cluster.local:8222\"\n    account: \"$G\"\n    stream: \"mystream\"\n    consumer: \"pull_consumer\"\n    lagThreshold: \"10\"\n    activationLagThreshold: \"15\"\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/nats-jetstream",
    "title": "NATS JetStream (2)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: nats-jetstream-scaledobject\n  namespace: nats-jetstream\nspec:\n  pollingInterval: 3   # Optional. Default: 30 seconds\n  cooldownPeriod: 10   # Optional. Default: 300 seconds\n  minReplicaCount: 0   # Optional. Default: 0\n  maxReplicaCount: 2   # Optional. Default: 100\n  scaleTargetRef:\n    name: sub\n  triggers:\n  - type: nats-jetstream\n    metadata:\n      natsServerMonitoringEndpoint: \"nats.nats.svc.cluster.local:8222\"\n      account: \"$G\"\n      stream: \"mystream\"\n      consumer: \"pull_consumer\"\n      lagThreshold: \"10\"\n      activationLagThreshold: \"15\"\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/nats-streaming",
    "title": "NATS Streaming (1)",
    "example": "triggers:\n- type: stan\n  metadata:\n    natsServerMonitoringEndpoint: \"stan-nats-ss.stan.svc.cluster.local:8222\"\n    queueGroup: \"grp1\"\n    durableName: \"ImDurable\"\n    subject: \"Test\"\n    lagThreshold: \"10\"\n    activationLagThreshold: \"5\"\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/nats-streaming",
    "title": "NATS Streaming (2)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: stan-scaledobject\n  namespace: example\nspec:\n  pollingInterval: 10   # Optional. Default: 30 seconds\n  cooldownPeriod: 30   # Optional. Default: 300 seconds\n  minReplicaCount: 0   # Optional. Default: 0\n  maxReplicaCount: 30  # Optional. Default: 100\n  scaleTargetRef:\n    name: gonuts-sub\n  triggers:\n  - type: stan\n    metadata:\n      natsServerMonitoringEndpoint: \"stan-nats-ss.stan.svc.cluster.local:8222\"\n      queueGroup: \"grp1\"\n      durableName: \"ImDurable\"\n      subject: \"Test\"\n      lagThreshold: \"10\"\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/nats-streaming",
    "title": "NATS Streaming (3)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: stan-secret\n  namespace: example\ntype: Opaque\ndata:\n  stan_endpoint: <base-64-encoded-endpoint>\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-trigger-auth-stan-secret\n  namespace: example\nspec:\n  secretTargetRef:\n  - parameter: natsServerMonitoringEndpoint\n    name: stan-secret\n    key: stan_endpoint\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: stan-scaledobject\n  namespace: example\nspec:\n  pollingInterval: 10   # Optional. Default: 30 seconds\n  cooldownPeriod: 30   # Optional. Default: 300 seconds\n  minReplicaCount: 0   # Optional. Default: 0\n  maxReplicaCount: 30  # Optional. Default: 100\n  scaleTargetRef:\n    name: gonuts-sub\n  triggers:\n  - type: stan\n    metadata:\n      queueGroup: \"grp1\"\n      durableName: \"ImDurable\"\n      subject: \"Test\"\n      lagThreshold: \"10\"\n    authenticationRef:\n      name: keda-trigger-auth-stan-secret\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/new-relic",
    "title": "New Relic (1)",
    "example": "triggers:\n  - type: new-relic\n    metadata:\n      # Required: Account - Subaccount to run the query on\n      account: '1234567'\n      # Required: QueryKey - Api key to connect to New Relic\n      queryKey: \"NRAK-xxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n      # Optional: nrRegion - Region to query data for. Default value is US.\n      region: \"US\"\n      # Optional: noDataError - If the query returns no data should this be treated as an error. Default value is false.\n      noDataError: \"true\"\n      # Required: nrql\n      nrql: \"SELECT average(duration) from Transaction where appName='SITE' TIMESERIES\"\n      # Required: threshold\n      threshold: \"50.50\"\n      # Optional: activationThreshold - Target value for activating the scaler.\n      activationThreshold: \"20.1\"\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/new-relic",
    "title": "New Relic (2)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: new-relic-secret\n  namespace: my-project\ntype: Opaque\ndata:\n  apiKey: TlJBSy0xMjM0NTY3ODkwMTIzNDU2Nwo= # base64 encoding of the new relic api key NRAK-12345678901234567\n  account: MTIzNDU2 # base64 encoding of the new relic account number 123456\n  region: VVM= # base64 encoding of the new relic region US\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-trigger-auth-new-relic\n  namespace: my-project\nspec:\n  secretTargetRef:\n  - parameter: queryKey\n    name: new-relic-secret\n    key: apiKey\n  - parameter: account\n    name: new-relic-secret\n    key: account\n  - parameter: region\n    name: new-relic-secret\n    key: region\n\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: newrelic-scaledobject\n  namespace: keda\nspec:\n  maxReplicaCount: 12\n  scaleTargetRef:\n    name: dummy\n  triggers:\n    - type: new-relic\n      metadata:\n        nrql: \"SELECT average(duration) from Transaction where appName='SITE' TIMESERIES\"\n        noDataError: \"true\"\n        threshold: '1000'\n      authenticationRef:\n        name: keda-trigger-auth-new-relic\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/openstack-metric",
    "title": "OpenStack Metric (1)",
    "example": "triggers:\n- type: openstack-metric\n  metadata:\n    metricsURL: http://localhost:8041/v1/metric #required\n    metricID: 003bb589-166d-439d-8c31-cbf098d863de #required\n    aggregationMethod: \"mean\" #required\n    granularity: 300 #required (seconds)\n    threshold: \"1.250\" #required\n    activationThreshold: \"0.250\" #optional\n    timeout: 30 #optional\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/openstack-metric",
    "title": "OpenStack Metric (2)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: openstack-secret-password\n  namespace: default\ntype: Opaque\ndata:\n  authURL: aHR0cDovL2xvY2FsaG9zdDo1MDAwL3YzLw==\n  userID: MWYwYzI3ODFiNDExNGQxM2E0NGI4ODk4Zjg1MzQwYmU=\n  password: YWRtaW4=\n  projectID: YjE2MWRjNTE4Y2QyNGJkYTg0ZDk0ZDlhMGU3M2ZjODc=\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: metrics-password-trigger-authentication\n  namespace: default\nspec:\n  secretTargetRef:\n  - parameter: authURL\n    name: openstack-secret-password\n    key: authURL\n  - parameter: userID\n    name: openstack-secret-password\n    key: userID\n  - parameter: password\n    name: openstack-secret-password\n    key: password\n  - parameter: projectID\n    name: openstack-secret-password\n    key: projectID\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: openstack-metric-scaledobject\n  namespace: default\nspec:\n  scaleTargetRef:\n    name: my-deployment\n  pollingInterval: 10\n  cooldownPeriod: 10\n  minReplicaCount: 0\n  triggers:\n  - type: openstack-metric\n    metadata:\n      metricsURL: http://localhost:8041/v1/metric\n      metricID: faf01aa5-da88-4929-905d-b83fbab46771\n      aggregationMethod: \"mean\"\n      granularity: 300\n      threshold: 1250\n      timeout: 30\n    authenticationRef:\n        name: openstack-metric-password-trigger-authentication\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/openstack-metric",
    "title": "OpenStack Metric (3)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: openstack-secret-appcredentials\n  namespace: default\ntype: Opaque\ndata:\n  authURL: aHR0cDovL2xvY2FsaG9zdDo1MDAwL3YzLw==\n  appCredentialID: OWYyY2UyYWRlYmFkNGQxNzg0NTgwZjE5ZTljMTExZTQ=\n  appCredentialSecret: LVdSbFJBZW9sMm91Z3VmZzNEVlBqcll6aU9za1pkZ3c4Y180XzRFU1pZREloT0RmajJkOHg0dU5yb3NudVIzWmxDVTZNLTVDT3R5NDFJX3M5R1N5Wnc=\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: openstack-metric-appcredentials-trigger-authentication\n  namespace: default\nspec:\n  secretTargetRef:\n  - parameter: authURL\n    name: openstack-secret-appcredentials\n    key: authURL\n  - parameter: appCredentialID\n    name: openstack-secret-appcredentials\n    key: appCredentialID\n  - parameter: appCredentialSecret\n    name: openstack-secret-appcredentials\n    key: appCredentialSecret\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: openstack-metric-scaledobject\n  namespace: default\nspec:\n  scaleTargetRef:\n    name: my-deployment\n  pollingInterval: 10\n  cooldownPeriod: 10\n  minReplicaCount: 0\n  triggers:\n  - type: openstack-metric\n    metadata:\n       metricsURL: http://localhost:8041/v1/metric\n      metricID: faf01aa5-da88-4929-905d-b83fbab46771\n      aggregationMethod: \"mean\"\n      granularity: 300\n      threshold: 1250\n    authenticationRef:\n        name: openstack-metric-appcredentials-trigger-authentication\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/openstack-swift",
    "title": "OpenStack Swift (1)",
    "example": "triggers:\n- type: openstack-swift\n  metadata:\n    containerName: my-container # Required\n    swiftURL: http://localhost:8080/v1/b161dc815cd24bda84d94d9a0e73cf78  # Optional\n    objectCount: \"2\"  # Optional\n    activationObjectCount: \"5\" # Optional\n    objectPrefix: \"my-prefix\" # Optional\n    objectDelimiter: \"/\"  # Optional\n    objectLimit: \"10\" # Optional\n    onlyFiles: \"true\" # Optional\n    timeout: \"2\"  # Optional\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/openstack-swift",
    "title": "OpenStack Swift (2)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: openstack-secret-password\n  namespace: default\ntype: Opaque\ndata:\n  authURL: aHR0cDovL2xvY2FsaG9zdDo1MDAwLw==\n  userID: MWYwYzI3ODFiNDExNGQxM2E0NGI4ODk4Zjg1MzQwYmU=\n  password: YWRtaW4=\n  projectID: YjE2MWRjNTE4Y2QyNGJkYTg0ZDk0ZDlhMGU3M2ZjODc=\n  regionName: Y2FsaWZvcm5pYS0x\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: swift-password-trigger-authentication\n  namespace: default\nspec:\n  secretTargetRef:\n  - parameter: authURL\n    name: openstack-secret-password\n    key: authURL\n  - parameter: userID\n    name: openstack-secret-password\n    key: userID\n  - parameter: password\n    name: openstack-secret-password\n    key: password\n  - parameter: projectID\n    name: openstack-secret-password\n    key: projectID\n  - parameter: regionName\n    name: openstack-secret-password\n    key: regionName\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: swift-scaledobject\n  namespace: default\nspec:\n  scaleTargetRef:\n    name: my-deployment\n  pollingInterval: 10\n  cooldownPeriod: 10\n  minReplicaCount: 0\n  triggers:\n  - type: openstack-swift\n    metadata:\n      containerName: my-container\n      objectCount: \"1\"\n      onlyFiles: \"true\"\n    authenticationRef:\n        name: swift-password-trigger-authentication\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/openstack-swift",
    "title": "OpenStack Swift (3)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: openstack-secret-appcredentials\n  namespace: default\ntype: Opaque\ndata:\n  authURL: aHR0cDovL2xvY2FsaG9zdDo1MDAwLw==\n  appCredentialID: OWYyY2UyYWRlYmFkNGQxNzg0NTgwZjE5ZTljMTExZTQ=\n  appCredentialSecret: LVdSbFJBZW9sMm91Z3VmZzNEVlBqcll6aU9za1pkZ3c4Y180XzRFU1pZREloT0RmajJkOHg0dU5yb3NudVIzWmxDVTZNLTVDT3R5NDFJX3M5R1N5Wnc=\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: swift-appcredentials-trigger-authentication\n  namespace: default\nspec:\n  secretTargetRef:\n  - parameter: authURL\n    name: openstack-secret-appcredentials\n    key: authURL\n  - parameter: appCredentialID\n    name: openstack-secret-appcredentials\n    key: appCredentialID\n  - parameter: appCredentialSecret\n    name: openstack-secret-appcredentials\n    key: appCredentialSecret\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: swift-scaledobject\n  namespace: default\nspec:\n  scaleTargetRef:\n    name: my-deployment\n  pollingInterval: 10\n  cooldownPeriod: 10\n  minReplicaCount: 0\n  triggers:\n  - type: openstack-swift\n    metadata:\n      swiftURL: http://localhost:8080/v1/AUTH_b161dc518cd24bda84d94d9a0e73fc87\n      containerName: my-container\n      objectCount: \"1\"\n    authenticationRef:\n        name: swift-appcredentials-trigger-authentication\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/postgresql",
    "title": "PostgreSQL (1)",
    "example": "triggers:\n- type: postgresql\n  metadata:\n    connectionFromEnv: AIRFLOW_CONN_AIRFLOW_DB\n    query: \"SELECT ceil(COUNT(*)::decimal / 16) FROM task_instance WHERE state='running' OR state='queued'\"\n    targetQueryValue: \"1.1\"\n    activationTargetQueryValue: \"5\"\n    metricName: backlog_process_count #optional. Generated value would be `postgresql-postgresql---test@localhost`\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/postgresql",
    "title": "PostgreSQL (2)",
    "example": "triggers:\n- type: postgresql\n  metadata:\n    userName: \"kedaUser\"\n    passwordFromEnv: PG_PASSWORD\n    host: postgres-svc.namespace.cluster.local #use the cluster-wide namespace as KEDA\n                                                #lives in a different namespace from your postgres\n    port: \"5432\"\n    dbName: test_db_name\n    sslmode: disable\n    query: \"SELECT ceil(COUNT(*)::decimal / 16) FROM task_instance WHERE state='running' OR state='queued'\"\n    targetQueryValue: \"2.2\"\n    metricName: backlog_process_count #optional. Generated value would be `postgresql-test_db_name`\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/postgresql",
    "title": "PostgreSQL (3)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: airflow-worker\nspec:\n  scaleTargetRef:\n    name: airflow-worker\n  pollingInterval: 10   # Optional. Default: 30 seconds\n  cooldownPeriod: 30    # Optional. Default: 300 seconds\n  maxReplicaCount: 10   # Optional. Default: 100\n  triggers:\n    - type: postgresql\n      metadata:\n        connectionFromEnv: AIRFLOW_CONN_AIRFLOW_DB\n        query: \"SELECT ceil(COUNT(*)::decimal / 16) FROM task_instance WHERE state='running' OR state='queued'\"\n        targetQueryValue: 1\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/predictkube",
    "title": "Predictkube (1)",
    "example": "triggers:\n- type: predictkube\n  metadata:\n    # Required fields:\n    predictHorizon: \"2h\"\n    historyTimeWindow: \"7d\"\n    prometheusAddress: http://<prometheus-host>:9090\n    query: sum(rate(http_requests_total{deployment=\"my-deployment\"}[2m]))\n    queryStep: \"2m\"\n    threshold: '100.50'\n    activationThreshold: '50.1'\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/predictkube",
    "title": "Predictkube (2)",
    "example": "---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: predictkube-secrets\n  namespace: some-namespace\ntype: Opaque\ndata:\n  apiKey: # Required: base64 encoded value of PredictKube apiKey\n  bearerToken: \"BEARER_TOKEN\" # Optional: bearer authentication for Prometheus\n  ca: \"CUSTOM_CA_CERT\" # Optional: certificate authority file for TLS client authentication for Prometheus\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-trigger-auth-predictkube-secret\n  namespace: some-namespace\nspec:\n  secretTargetRef:\n    # Required: API key for your predictkube account\n  - parameter: apiKey\n    name: predictkube-secrets\n    key: apiKey\n    # Optional: might be required if you're using bearer auth for Promethrus\n  - parameter: bearerToken\n    name: keda-prom-secret\n    key: bearerToken\n    # Optional: might be required if you're using a custom CA for Promethrus\n  - parameter: ca\n    name: keda-prom-secret\n    key: ca\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: predictkube-scaledobject\n  namespace: some-namespace\nspec:\n  scaleTargetRef:\n    name: my-deployment\n    kind: StatefulSet\n  pollingInterval: 30\n  cooldownPeriod: 7200\n  minReplicaCount: 3\n  maxReplicaCount: 50\n  triggers:\n  - type: predictkube\n    metadata:\n      predictHorizon: \"2h\"\n      historyTimeWindow: \"7d\"\n      prometheusAddress: http://<prometheus-host>:9090\n      query: sum(rate(http_requests_total{deployment=\"my-deployment\"}[2m])) # Note: query must return a vector/scalar single element response\n      queryStep: \"2m\" # Note: query step duration for range prometheus queries\n      threshold: \"100\"\n      authModes: \"bearer\" # might be required if you're using bearer auth for Promethrus\n    authenticationRef:\n      name: keda-trigger-auth-predictkube-secret\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/prometheus",
    "title": "Prometheus (1)",
    "example": "triggers:\n- type: prometheus\n  metadata:\n    # Required fields:\n    serverAddress: http://<prometheus-host>:9090\n    metricName: http_requests_total # Note: name to identify the metric, generated value would be `prometheus-http_requests_total`\n    query: sum(rate(http_requests_total{deployment=\"my-deployment\"}[2m])) # Note: query must return a vector/scalar single element response\n    threshold: '100.50'\n    activationThreshold: '5.5'\n    # Optional fields:\n    namespace: example-namespace  # for namespaced queries, eg. Thanos\n    cortexOrgID: my-org # Optional. X-Scope-OrgID header for Cortex.\n    ignoreNullValues: false # Default is `true`, which means ignoring the empty value list from Prometheus. Set to `false` the scaler will return error when Prometheus target is lost\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/prometheus",
    "title": "Prometheus (2)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: prometheus-scaledobject\n  namespace: default\nspec:\n  scaleTargetRef:\n    name: my-deployment\n  triggers:\n  - type: prometheus\n    metadata:\n      serverAddress: http://<prometheus-host>:9090\n      metricName: http_requests_total\n      threshold: '100'\n      query: sum(rate(http_requests_total{deployment=\"my-deployment\"}[2m]))\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/prometheus",
    "title": "Prometheus (3)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: keda-prom-secret\n  namespace: default\ndata:\n  bearerToken: \"BEARER_TOKEN\"\n  ca: \"CUSTOM_CA_CERT\"\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-prom-creds\n  namespace: default\nspec:\n  secretTargetRef:\n    - parameter: bearerToken\n      name: keda-prom-secret\n      key: bearerToken\n      # might be required if you're using a custom CA\n    - parameter: ca\n      name: keda-prom-secret\n      key: ca\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: prometheus-scaledobject\n  namespace: keda\n  labels:\n    deploymentName: dummy\nspec:\n  maxReplicaCount: 12\n  scaleTargetRef:\n    name: dummy\n  triggers:\n    - type: prometheus\n      metadata:\n        serverAddress: http://<prometheus-host>:9090\n        metricName: http_requests_total\n        threshold: '100'\n        query: sum(rate(http_requests_total{deployment=\"my-deployment\"}[2m]))\n        authModes: \"bearer\"\n      authenticationRef:\n        name: keda-prom-creds\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/prometheus",
    "title": "Prometheus (4)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: keda-prom-secret\n  namespace: default\ndata:\n  username: \"dXNlcm5hbWUK\" # Must be base64\n  password: \"cGFzc3dvcmQK\"\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-prom-creds\n  namespace: default\nspec:\n  secretTargetRef:\n    - parameter: username\n      name: keda-prom-secret\n      key: username\n    - parameter: password\n      name: keda-prom-secret\n      key: password\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: prometheus-scaledobject\n  namespace: keda\n  labels:\n    deploymentName: dummy\nspec:\n  maxReplicaCount: 12\n  scaleTargetRef:\n    name: dummy\n  triggers:\n    - type: prometheus\n      metadata:\n        serverAddress: http://<prometheus-host>:9090\n        metricName: http_requests_total\n        threshold: '100'\n        query: sum(rate(http_requests_total{deployment=\"my-deployment\"}[2m]))\n        authModes: \"basic\"\n      authenticationRef:\n        name: keda-prom-creds\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/prometheus",
    "title": "Prometheus (5)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: keda-prom-secret\n  namespace: default\ndata:\n  cert: \"cert\"\n  key: \"key\"\n  ca: \"ca\"\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-prom-creds\n  namespace: default\nspec:\n  secretTargetRef:\n    - parameter: cert\n      name: keda-prom-secret\n      key: cert\n    - parameter: key\n      name: keda-prom-secret\n      key: key\n    - parameter: ca\n      name: keda-prom-secret\n      key: ca\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: prometheus-scaledobject\n  namespace: keda\n  labels:\n    deploymentName: dummy\nspec:\n  maxReplicaCount: 12\n  scaleTargetRef:\n    name: dummy\n  triggers:\n    - type: prometheus\n      metadata:\n        serverAddress: http://<prometheus-host>:9090\n        metricName: http_requests_total\n        threshold: '100'\n        query: sum(rate(http_requests_total{deployment=\"my-deployment\"}[2m]))\n        authModes: \"tls\"\n      authenticationRef:\n        name: keda-prom-creds\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/prometheus",
    "title": "Prometheus (6)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: keda-prom-secret\n  namespace: default\ndata:\n  cert: \"cert\"\n  key: \"key\"\n  ca: \"ca\"\n  username: \"username\"\n  password: \"password\"\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-prom-creds\n  namespace: default\nspec:\n  secretTargetRef:\n    - parameter: cert\n      name: keda-prom-secret\n      key: cert\n    - parameter: key\n      name: keda-prom-secret\n      key: key\n    - parameter: ca\n      name: keda-prom-secret\n      key: ca\n    - parameter: username\n      name: keda-prom-secret\n      key: username\n    - parameter: password\n      name: keda-prom-secret\n      key: password\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: prometheus-scaledobject\n  namespace: keda\n  labels:\n    deploymentName: dummy\nspec:\n  maxReplicaCount: 12\n  scaleTargetRef:\n    name: dummy\n  triggers:\n    - type: prometheus\n      metadata:\n        serverAddress: http://<prometheus-host>:9090\n        metricName: http_requests_total\n        threshold: '100'\n        query: sum(rate(http_requests_total{deployment=\"my-deployment\"}[2m]))\n        authModes: \"tls,basic\"\n      authenticationRef:\n        name: keda-prom-creds\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/pulsar",
    "title": "Apache Pulsar (1)",
    "example": "triggers:\n- type: pulsar\n  metadata:\n    adminURL: http://localhost:80\n    topic: persistent://public/default/my-topic\n    subscription: sub1\n    msgBacklogThreshold: '5'\n    activationMsgBacklogThreshold: '2'\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/pulsar",
    "title": "Apache Pulsar (2)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: pulsar-scaledobject\n  namespace: default\nspec:\n  scaleTargetRef:\n    name: pulsar-consumer\n  pollingInterval: 30\n  triggers:\n  - type: pulsar\n    metadata:\n      adminURL: http://localhost:80\n      topic: persistent://public/default/my-topic\n      subscription: sub1\n      msgBacklogThreshold: '5'\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/pulsar",
    "title": "Apache Pulsar (3)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: keda-pulsar-secrets\n  namespace: default\ndata:\n  ca: <your ca>\n  cert: <your cert>\n  key: <your key>\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-trigger-auth-pulsar-credential\n  namespace: default\nspec:\n  secretTargetRef:\n  - parameter: ca\n    name: keda-pulsar-secrets\n    key: ca\n  - parameter: cert\n    name: keda-pulsar-secrets\n    key: cert\n  - parameter: key\n    name: keda-pulsar-secrets\n    key: key\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: pulsar-scaledobject\n  namespace: default\nspec:\n  scaleTargetRef:\n    name: pulsar-consumer\n  pollingInterval: 30\n  triggers:\n  - type: pulsar\n    metadata:\n      tls: \"enable\"\n      adminURL: https://localhost:8443\n      topic: persistent://public/default/my-topic\n      subscription: sub1\n      msgBacklogThreshold: '5'\n    authenticationRef:\n      name:  keda-trigger-auth-pulsar-credential\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/rabbitmq-queue",
    "title": "RabbitMQ Queue (1)",
    "example": "triggers:\n- type: rabbitmq\n  metadata:\n    host: amqp://localhost:5672/vhost # Optional. If not specified, it must be done by using TriggerAuthentication.\n    protocol: auto # Optional. Specifies protocol to use, either amqp or http, or auto to autodetect based on the `host` value. Default value is auto.\n    mode: QueueLength # QueueLength or MessageRate\n    value: \"100.50\" # message backlog or publish/sec. target per instance\n    activationValue: \"10.5\" # Optional. Activation threshold\n    queueName: testqueue\n    vhostName: / # Optional. If not specified, use the vhost in the `host` connection string.\n    # Alternatively, you can use existing environment variables to read configuration from:\n    # See details in \"Parameter list\" section\n    hostFromEnv: RABBITMQ_HOST # Optional. You can use this instead of `host` parameter\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/rabbitmq-queue",
    "title": "RabbitMQ Queue (2)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: keda-rabbitmq-secret\ndata:\n  host: <AMQP URI connection string> # base64 encoded value of format amqp://guest:password@localhost:5672/vhost\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-trigger-auth-rabbitmq-conn\n  namespace: default\nspec:\n  secretTargetRef:\n    - parameter: host\n      name: keda-rabbitmq-secret\n      key: host\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: rabbitmq-scaledobject\n  namespace: default\nspec:\n  scaleTargetRef:\n    name: rabbitmq-deployment\n  triggers:\n  - type: rabbitmq\n    metadata:\n      protocol: amqp\n      queueName: testqueue\n      mode: QueueLength\n      value: \"20\"\n      metricName: custom-testqueue #optional. Generated value would be `rabbitmq-custom-testqueue`\n    authenticationRef:\n      name: keda-trigger-auth-rabbitmq-conn\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/rabbitmq-queue",
    "title": "RabbitMQ Queue (3)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: keda-rabbitmq-secret\ndata:\n  host: <HTTP API endpoint> # base64 encoded value of format http://guest:password@localhost:15672/vhost\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-trigger-auth-rabbitmq-conn\n  namespace: default\nspec:\n  secretTargetRef:\n    - parameter: host\n      name: keda-rabbitmq-secret\n      key: host\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: rabbitmq-scaledobject\n  namespace: default\nspec:\n  scaleTargetRef:\n    name: rabbitmq-deployment\n  triggers:\n  - type: rabbitmq\n    metadata:\n      protocol: http\n      queueName: testqueue\n      mode: QueueLength\n      value: \"20\"\n    authenticationRef:\n      name: keda-trigger-auth-rabbitmq-conn\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/rabbitmq-queue",
    "title": "RabbitMQ Queue (4)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: keda-rabbitmq-secret\ndata:\n  host: <HTTP API endpoint> # base64 encoded value of format http://guest:password@localhost:15672/vhost\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-trigger-auth-rabbitmq-conn\n  namespace: default\nspec:\n  secretTargetRef:\n    - parameter: host\n      name: keda-rabbitmq-secret\n      key: host\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: rabbitmq-scaledobject\n  namespace: default\nspec:\n  scaleTargetRef:\n    name: rabbitmq-deployment\n  triggers:\n  - type: rabbitmq\n    metadata:\n      protocol: http\n      queueName: testqueue\n      mode: QueueLength\n      value: \"20\"\n    authenticationRef:\n      name: keda-trigger-auth-rabbitmq-conn\n  - type: rabbitmq\n    metadata:\n      protocol: http\n      queueName: testqueue\n      mode: MessageRate\n      value: \"100\"\n    authenticationRef:\n      name: keda-trigger-auth-rabbitmq-conn\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/rabbitmq-queue",
    "title": "RabbitMQ Queue (5)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: keda-rabbitmq-secret\ndata:\n  host: <HTTP API endpoint> # base64 encoded value of format http://guest:password@localhost:15672/vhost\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-trigger-auth-rabbitmq-conn\n  namespace: default\nspec:\n  secretTargetRef:\n    - parameter: host\n      name: keda-rabbitmq-secret\n      key: host\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: rabbitmq-scaledobject\n  namespace: default\nspec:\n  scaleTargetRef:\n    name: rabbitmq-deployment\n  triggers:\n  - type: rabbitmq\n    metadata:\n      protocol: http\n      queueName: ^.*incoming$\n      mode: QueueLength\n      value: \"20\"\n      useRegex: \"true\"\n      operation: max\n    authenticationRef:\n      name: keda-trigger-auth-rabbitmq-conn\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/redis-cluster-lists",
    "title": "Redis Lists (supports Redis Cluster) (1)",
    "example": "triggers:\n- type: redis-cluster\n  metadata:\n    addresses: localhost:6379 # Comma separated list of the format host:port\n    usernameFromEnv: REDIS_USERNAME # optional\n    passwordFromEnv: REDIS_PASSWORD\n    listName: mylist # Required\n    listLength: \"5\" # Required\n    activationListLength: \"5\" # optional\n    enableTLS: \"false\" # optional\n    # Alternatively, you can use existing environment variables to read configuration from:\n    # See details in \"Parameter list\" section\n    addressesFromEnv: REDIS_ADDRESSES # Optional. You can use this instead of `addresses` parameter\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/redis-cluster-lists",
    "title": "Redis Lists (supports Redis Cluster) (2)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: votes-db-secret\n  namespace: my-project\ntype: Opaque\ndata:\n  redis_username: YWRtaW4=\n  redis_password: YWRtaW4=\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-trigger-auth-redis-secret\n  namespace: my-project\nspec:\n  secretTargetRef:\n  - parameter: username\n    name: votes-db-secret\n    key: redis_username\n  - parameter: password\n    name: votes-db-secret\n    key: redis_password\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: redis-scaledobject\n  namespace: my-project\nspec:\n  scaleTargetRef:\n    name: votes\n  triggers:\n  - type: redis-cluster\n    metadata:\n      addresses: node1:6379, node2:6379, node3:6379\n      listName: mylist\n      listLength: \"10\"\n    authenticationRef:\n      name: keda-trigger-auth-redis-secret\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/redis-cluster-streams",
    "title": "Redis Streams (supports Redis Cluster) (1)",
    "example": "triggers:\n- type: redis-cluster-streams\n  metadata:\n    addresses: localhost:6379 # Required if hosts and ports are not provided. Format - comma separated list of host:port\n    hosts: localhost # Comma separated lists of hosts. Required if address is not provided\n    ports: \"6379\" # Comma separated lists of ports. Required if addresses are not provided and hosts has been provided.\n    usernameFromEnv: REDIS_USERNAME # optional (can also use authenticationRef)\n    passwordFromEnv: REDIS_PASSWORD # optional (can also use authenticationRef)\n    stream: my-stream # Required - name of the Redis Stream\n    consumerGroup: my-consumer-group # Required - name of consumer group associated with Redis Stream\n    pendingEntriesCount: \"10\" # Required - number of entries in the Pending Entries List for the specified consumer group in the Redis Stream\n    enableTLS: \"false\" # optional\n    # Alternatively, you can use existing environment variables to read configuration from:\n    # See details in \"Parameter list\" section\n    addressesFromEnv: REDIS_ADDRESSES # Optional. You can use this instead of `addresses` parameter\n    hostsFromEnv: REDIS_HOSTS # Optional. You can use this instead of `hosts` parameter\n    portsFromEnv: REDIS_PORTS # Optional. You can use this instead of `ports` parameter\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/redis-cluster-streams",
    "title": "Redis Streams (supports Redis Cluster) (2)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: redis-streams-scaledobject\n  namespace: default\nspec:\n  scaleTargetRef:\n    name: redis-streams-consumer\n  pollingInterval: 15\n  cooldownPeriod: 200\n  maxReplicaCount: 25\n  minReplicaCount: 1\n  triggers:\n    - type: redis-cluster-streams\n      metadata:\n        addressesFromEnv: REDIS_ADDRESSES\n        usernameFromEnv: REDIS_USERNAME # name of the environment variable in the Deployment\n        passwordFromEnv: REDIS_PASSWORD # name of the environment variable in the Deployment\n        stream: my-stream\n        consumerGroup: consumer-group-1\n        pendingEntriesCount: \"10\"\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/redis-cluster-streams",
    "title": "Redis Streams (supports Redis Cluster) (3)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: redis-streams-auth\ntype: Opaque\ndata:\n  redis_username: <encoded redis username>\n  redis_password: <encoded redis password>\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-redis-stream-triggerauth\nspec:\n  secretTargetRef:\n    - parameter: username\n      name: redis-streams-auth # name of the Secret\n      key: redis_username # name of the key in the Secret\n    - parameter: password\n      name: redis-streams-auth # name of the Secret\n      key: redis_password # name of the key in the Secret\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: redis-streams-scaledobject\n  namespace: default\nspec:\n  scaleTargetRef:\n    name: redis-streams-consumer\n  pollingInterval: 15\n  cooldownPeriod: 200\n  maxReplicaCount: 25\n  minReplicaCount: 1\n  triggers:\n    - type: redis-cluster-streams\n      metadata:\n        address: node1:6379, node2:6379, node3:6379\n        stream: my-stream\n        consumerGroup: consumer-group-1\n        pendingEntriesCount: \"10\"\n      authenticationRef:\n        name: keda-redis-stream-triggerauth # name of the TriggerAuthentication resource\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/redis-lists",
    "title": "Redis Lists (1)",
    "example": "triggers:\n- type: redis\n  metadata:\n    address: localhost:6379 # Format must be host:port\n    usernameFromEnv: REDIS_USERNAME # optional\n    passwordFromEnv: REDIS_PASSWORD\n    listName: mylist # Required\n    listLength: \"5\" # Required\n    activationListLength: \"5\" # optional\n    enableTLS: \"false\" # optional\n    databaseIndex: \"0\" # optional\n    # Alternatively, you can use existing environment variables to read configuration from:\n    # See details in \"Parameter list\" section\n    addressFromEnv: REDIS_HOST # Optional. You can use this instead of `address` parameter\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/redis-lists",
    "title": "Redis Lists (2)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: votes-db-secret\n  namespace: my-project\ntype: Opaque\ndata:\n  redis_username: YWRtaW4=\n  redis_password: YWRtaW4=\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-trigger-auth-redis-secret\n  namespace: my-project\nspec:\n  secretTargetRef:\n  - parameter: username\n    name: votes-db-secret\n    key: redis_username\n  - parameter: password\n    name: votes-db-secret\n    key: redis_password\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: redis-scaledobject\n  namespace: my-project\nspec:\n  scaleTargetRef:\n    name: votes\n  triggers:\n  - type: redis\n    metadata:\n      address: localhost:6379\n      listName: mylist\n      listLength: \"10\"\n    authenticationRef:\n      name: keda-trigger-auth-redis-secret\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/redis-sentinel-lists",
    "title": "Redis Lists (supports Redis Sentinel) (1)",
    "example": "triggers:\n- type: redis-sentinel\n  metadata:\n    addresses: localhost:26379 # Comma separated list of the format host:port\n    usernameFromEnv: REDIS_USERNAME # optional\n    passwordFromEnv: REDIS_PASSWORD # optional\n    sentinelUsernameFromEnv: REDIS_SENTINEL_USERNAME # optional\n    sentinelPasswordFromEnv: REDIS_SENTINEL_PASSWORD # optional\n    sentinelMasterFromEnv: REDIS_SENTINEL_MASTER # optional\n    listName: mylist # Required\n    listLength: \"5\" # Required\n    activationListLength: \"5\" # optional\n    enableTLS: \"false\" # optional\n    # Alternatively, you can use existing environment variables to read configuration from:\n    # See details in \"Parameter list\" section\n    addressesFromEnv: REDIS_ADDRESSES # Optional. You can use this instead of `addresses` parameter\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/redis-sentinel-lists",
    "title": "Redis Lists (supports Redis Sentinel) (2)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: votes-db-secret\n  namespace: my-project\ntype: Opaque\ndata:\n  redis_username: YWRtaW4=\n  redis_password: YWRtaW4=\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-trigger-auth-redis-secret\n  namespace: my-project\nspec:\n  secretTargetRef:\n  - parameter: username\n    name: votes-db-secret\n    key: redis_username\n  - parameter: password\n    name: votes-db-secret\n    key: redis_password\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: redis-scaledobject\n  namespace: my-project\nspec:\n  scaleTargetRef:\n    name: votes\n  triggers:\n  - type: redis-sentinel\n    metadata:\n      addresses: node1:26379, node2:26379, node3:26379\n      listName: mylist\n      listLength: \"10\"\n      sentinelMaster: \"mymaster\"\n    authenticationRef:\n      name: keda-trigger-auth-redis-secret\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/redis-sentinel-streams",
    "title": "Redis Streams (supports Redis Sentinel) (1)",
    "example": "triggers:\n- type: redis-sentinel-streams\n  metadata:\n    addresses: localhost:26379 # Required if hosts and ports are not provided. Format - comma separated list of host:port\n    hosts: localhost # Comma separated lists of hosts. Required if address is not provided\n    ports: \"26379\" # Comma separated lists of ports. Required if addresses are not provided and hosts has been provided.\n    usernameFromEnv: REDIS_USERNAME # optional (can also use authenticationRef)\n    passwordFromEnv: REDIS_PASSWORD # optional (can also use authenticationRef)\n    stream: my-stream # Required - name of the Redis Stream\n    consumerGroup: my-consumer-group # Required - name of consumer group associated with Redis Stream\n    pendingEntriesCount: \"10\" # Required - number of entries in the Pending Entries List for the specified consumer group in the Redis Stream\n    enableTLS: \"false\" # optional\n    # Alternatively, you can use existing environment variables to read configuration from:\n    # See details in \"Parameter list\" section\n    addressesFromEnv: REDIS_ADDRESSES # Optional. You can use this instead of `addresses` parameter\n    hostsFromEnv: REDIS_HOSTS # Optional. You can use this instead of `hosts` parameter\n    portsFromEnv: REDIS_PORTS # Optional. You can use this instead of `ports` parameter\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/redis-sentinel-streams",
    "title": "Redis Streams (supports Redis Sentinel) (2)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: redis-streams-scaledobject\n  namespace: default\nspec:\n  scaleTargetRef:\n    name: redis-streams-consumer\n  pollingInterval: 15\n  cooldownPeriod: 200\n  maxReplicaCount: 25\n  minReplicaCount: 1\n  triggers:\n    - type: redis-sentinel-streams\n      metadata:\n        addressesFromEnv: REDIS_ADDRESSES\n        usernameFromEnv: REDIS_USERNAME # name of the environment variable in the Deployment\n        passwordFromEnv: REDIS_PASSWORD # name of the environment variable in the Deployment\n        stream: my-stream\n        consumerGroup: consumer-group-1\n        pendingEntriesCount: \"10\"\n        sentinelMaster: \"mymaster\"\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/redis-sentinel-streams",
    "title": "Redis Streams (supports Redis Sentinel) (3)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: redis-streams-auth\ntype: Opaque\ndata:\n  redis_username: <encoded redis username>\n  redis_password: <encoded redis password>\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-redis-stream-triggerauth\nspec:\n  secretTargetRef:\n    - parameter: username\n      name: redis-streams-auth # name of the Secret\n      key: redis_username # name of the key in the Secret\n    - parameter: password\n      name: redis-streams-auth # name of the Secret\n      key: redis_password # name of the key in the Secret\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: redis-streams-scaledobject\n  namespace: default\nspec:\n  scaleTargetRef:\n    name: redis-streams-consumer\n  pollingInterval: 15\n  cooldownPeriod: 200\n  maxReplicaCount: 25\n  minReplicaCount: 1\n  triggers:\n    - type: redis-sentinel-streams\n      metadata:\n        address: node1:26379, node2:26379, node3:26379\n        stream: my-stream\n        consumerGroup: consumer-group-1\n        pendingEntriesCount: \"10\"\n        sentinelMaster: \"mymaster\"\n      authenticationRef:\n        name: keda-redis-stream-triggerauth # name of the TriggerAuthentication resource\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/redis-streams",
    "title": "Redis Streams (1)",
    "example": "triggers:\n- type: redis-streams\n  metadata:\n    address: localhost:6379 # Required if host and port are not provided. Format - host:port\n    host: localhost # Required if address is not provided\n    port: \"6379\" # Required if address is not provided and host has been provided.\n    usernameFromEnv: REDIS_USERNAME # optional (can also use authenticationRef)\n    passwordFromEnv: REDIS_PASSWORD # optional (can also use authenticationRef)\n    stream: my-stream # Required - name of the Redis Stream\n    consumerGroup: my-consumer-group # Required - name of consumer group associated with Redis Stream\n    pendingEntriesCount: \"10\" # Required - number of entries in the Pending Entries List for the specified consumer group in the Redis Stream\n    enableTLS: \"false\" # optional\n    databaseIndex: \"0\" # optional\n    # Alternatively, you can use existing environment variables to read configuration from:\n    # See details in \"Parameter list\" section\n    addressFromEnv: REDIS_ADDRESS # Optional. You can use this instead of `address` parameter\n    hostFromEnv: REDIS_HOST # Optional. You can use this instead of `host` parameter\n    portFromEnv: REDIS_PORT # Optional. You can use this instead of `port` parameter\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/redis-streams",
    "title": "Redis Streams (2)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: redis-streams-scaledobject\n  namespace: default\nspec:\n  scaleTargetRef:\n    name: redis-streams-consumer\n  pollingInterval: 15\n  cooldownPeriod: 200\n  maxReplicaCount: 25\n  minReplicaCount: 1\n  triggers:\n    - type: redis-streams\n      metadata:\n        addressFromEnv: REDIS_HOST\n        usernameFromEnv: REDIS_USERNAME # name of the environment variable in the Deployment\n        passwordFromEnv: REDIS_PASSWORD # name of the environment variable in the Deployment\n        stream: my-stream\n        consumerGroup: consumer-group-1\n        pendingEntriesCount: \"10\"\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/redis-streams",
    "title": "Redis Streams (3)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: redis-streams-auth\ntype: Opaque\ndata:\n  redis_username: <encoded redis username>\n  redis_password: <encoded redis password>\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: keda-redis-stream-triggerauth\nspec:\n  secretTargetRef:\n    - parameter: username\n      name: redis-streams-auth # name of the Secret\n      key: redis_username # name of the key in the Secret\n    - parameter: password\n      name: redis-streams-auth # name of the Secret\n      key: redis_password # name of the key in the Secret\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: redis-streams-scaledobject\n  namespace: default\nspec:\n  scaleTargetRef:\n    name: redis-streams-consumer\n  pollingInterval: 15\n  cooldownPeriod: 200\n  maxReplicaCount: 25\n  minReplicaCount: 1\n  triggers:\n    - type: redis-streams\n      metadata:\n        address: localhost:6379\n        stream: my-stream\n        consumerGroup: consumer-group-1\n        pendingEntriesCount: \"10\"\n      authenticationRef:\n        name: keda-redis-stream-triggerauth # name of the TriggerAuthentication resource\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/selenium-grid-scaler",
    "title": "Selenium Grid Scaler (1)",
    "example": "triggers:\n  - type: selenium-grid\n    metadata:\n      url: 'http://selenium-hub:4444/graphql' # Required\n      browserName: 'chrome'  # Required\n      browserVersion: '91.0' # Optional. Only required when supporting multiple versions of browser in your Selenium Grid.\n      unsafeSsl : 'true' # Optional\n      activationThreshold: 5 # Optional\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/selenium-grid-scaler",
    "title": "Selenium Grid Scaler (2)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: selenium-grid-chrome-scaledobject\n  namespace: keda\n  labels:\n    deploymentName: selenium-chrome-node\nspec:\n  maxReplicaCount: 8\n  scaleTargetRef:\n    name: selenium-chrome-node\n  triggers:\n    - type: selenium-grid\n      metadata:\n        url: 'http://selenium-hub:4444/graphql'\n        browserName: 'chrome'\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/selenium-grid-scaler",
    "title": "Selenium Grid Scaler (3)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: selenium-grid-firefox-scaledobject\n  namespace: keda\n  labels:\n    deploymentName: selenium-firefox-node\nspec:\n  maxReplicaCount: 8\n  scaleTargetRef:\n    name: selenium-firefox-node\n  triggers:\n    - type: selenium-grid\n      metadata:\n        url: 'http://selenium-hub:4444/graphql'\n        browserName: 'firefox'\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/selenium-grid-scaler",
    "title": "Selenium Grid Scaler (4)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: selenium-grid-edge-scaledobject\n  namespace: keda\n  labels:\n    deploymentName: selenium-edge-node\nspec:\n  maxReplicaCount: 8\n  scaleTargetRef:\n    name: selenium-edge-node\n  triggers:\n    - type: selenium-grid\n      metadata:\n        url: 'http://selenium-hub:4444/graphql'\n        browserName: 'MicrosoftEdge'\n        sessionBrowserName: 'msedge'\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/selenium-grid-scaler",
    "title": "Selenium Grid Scaler (5)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: selenium-grid-chrome-91-scaledobject\n  namespace: keda\n  labels:\n    deploymentName: selenium-chrome-node-91\nspec:\n  maxReplicaCount: 8\n  scaleTargetRef:\n    name: selenium-chrome-node-91\n  triggers:\n    - type: selenium-grid\n      metadata:\n        url: 'http://selenium-hub:4444/graphql'\n        browserName: 'chrome'\n        browserVersion: '91.0'\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/selenium-grid-scaler",
    "title": "Selenium Grid Scaler (6)",
    "example": "apiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name: selenium-grid-chrome-90-scaledobject\n  namespace: keda\n  labels:\n    deploymentName: selenium-chrome-node-90\nspec:\n  maxReplicaCount: 8\n  scaleTargetRef:\n    name: selenium-chrome-node-90\n  triggers:\n    - type: selenium-grid\n      metadata:\n        url: 'http://selenium-hub:4444/graphql'\n        browserName: 'chrome'\n        browserVersion: '90.0'\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/solace-pub-sub",
    "title": "Solace PubSub+ Event Broker (1)",
    "example": "triggers:\n- type: solace-event-queue\n  metadata:\n    solaceSempBaseURL:                  http://solace_broker:8080\n    messageVpn:                         message-vpn\n    queueName:                          queue_name\n    messageCountTarget:                 '100'\n    messageSpoolUsageTarget:            '100'       ### Megabytes (MB)\n    activationMessageCountTarget:       '100'\n    activationMessageSpoolUsageTarget:  '100'       ### Megabytes (MB)\n    username:                           semp-user\n    password:                           semp-pwd\n    usernameFromEnv:                    ENV_VAR_USER\n    passwordFromEnv:                    ENV_VAR_PWD\n"
  },
  {
    "kedaDocsUrl": "https://keda.sh/docs/2.8/scalers/solace-pub-sub",
    "title": "Solace PubSub+ Event Broker (2)",
    "example": "apiVersion: v1\nkind: Secret\nmetadata:\n  name:      solace-secret\n  namespace: solace\n  labels:\n    app: solace-consumer\ntype: Opaque\ndata:\n  SEMP_USER:         YWRtaW4=\n  SEMP_PASSWORD:     S2VkYUxhYkFkbWluUHdkMQ==\n---\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\nmetadata:\n  name:      solace-scaled-object\n  namespace: solace\nspec:\n  scaleTargetRef:\n    apiVersion:    apps/v1\n    kind:          Deployment\n    name:          solace-consumer\n  pollingInterval: 20\n  cooldownPeriod:  60\n  minReplicaCount:  0\n  maxReplicaCount: 10\n  triggers:\n  - type: solace-event-queue\n    metadata:\n      solaceSempBaseURL:       http://broker-pubsubplus.solace.svc.cluster.local:8080\n      messageVpn:              test_vpn\n      queueName:               SCALED_CONSUMER_QUEUE1\n      messageCountTarget:      '50'\n      messageSpoolUsageTarget: '100000'\n    authenticationRef:\n      name: solace-trigger-auth\n---\napiVersion: keda.sh/v1alpha1\nkind: TriggerAuthentication\nmetadata:\n  name: solace-trigger-auth\n  namespace: solace\nspec:\n  secretTargetRef:\n    - parameter:   username\n      name:        solace-secret\n      key:         SEMP_USER\n    - parameter:   password\n      name:        solace-secret\n      key:         SEMP_PASSWORD\n"
  }
]